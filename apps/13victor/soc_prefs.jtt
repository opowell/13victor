app.isStandaloneApp = false;
app.groupSize = 1;

app.tables = [
    [
[10,10,5,3],
[10,10,7,3],
[10,10,9,3],
[10,10,9.50,3],
[10,10,10,3],
[10,10,10.50,3],
[10,10,11,3],
[10,10,11.50,3],
[10,10,12,3],
[10,10,14,3]
    ],
    [
[10,10,6,5],
[10,10,8,5],
[10,10,9,5],
[10,10,9.50,5],
[10,10,10,5],
[10,10,10.50,5],
[10,10,11,5],
[10,10,11.50,5],
[10,10,12,5],
[10,10,14,5]
    ],
    [
[10,10,8,7],
[10,10,8.50,7],
[10,10,9,7],
[10,10,9.50,7],
[10,10,10,7],
[10,10,10.50,7],
[10,10,11,7],
[10,10,11.50,7],
[10,10,12,7],
[10,10,14,7]
    ],
    [
[10,10,7,13],
[10,10,8,13],
[10,10,8.50,13],
[10,10,9,13],
[10,10,9.50,13],
[10,10,10,13],
[10,10,10.50,13],
[10,10,11,13],
[10,10,11.50,13],
[10,10,12,13]
    ],
    [
[10,10,7,15],
[10,10,8,15],
[10,10,8.50,15],
[10,10,9,15],
[10,10,9.50,15],
[10,10,10,15],
[10,10,10.50,15],
[10,10,11,15],
[10,10,12,15],
[10,10,14,15]
    ],
    [
[10,10,7,17],
[10,10,8,17],
[10,10,8.5,17],
[10,10,9,17],
[10,10,9.5,17],
[10,10,10,17],
[10,10,10.5,17],
[10,10,11,17],
[10,10,13,17],
[10,10,16,17]
    ]
];

let stage = app.newStage('decide');
stage.playerStart = function(player) {
    player.switchRow = '';
    player.participant.socPrefPayoffs = [];
    player.choices = [];
    player.participant.socPrefTables = [];
    let indices = [0, 1, 2, 3, 4, 5];
    Utils.shuffle(indices);
    player.order = ''
    for (let i = 0; i<indices.length; i++) {
      player.participant.socPrefTables.push(app.tables[indices[i]]);
      player.order += '' + (indices[i] + 1)
    }
    player.tableId = 0;
    player.table = player.participant.socPrefTables[player.tableId];
    player.allAnswered = false;
}
stage.activeScreen = `
<link rel="stylesheet" href="/shared/bootstrap.min.css">
<div class="card" style='background-color: inherit; border: none;'>
    <div class="card-body">
    <h4>Table: {{ player.tableId + 1 }} / {{ app.tables.length}}</h4>
    <p>Please choose the row in which you would like to change for the first time from the left to the right allocation. In order to do so, please mark the row of your choice. After you have marked the row, the rest of the table will be completed automatically as implied by your choice. That is, the row(s) in which you prefer the left allocation and the row(s) in which you prefer the right allocation will be automatically highlighted in green. Please check your decision then. Revise your choice or confirm it by clicking "Continue". All numbers in the table are in Points.
    <table>
        <tr>
            <td></td>
            <td colspan=2>Allocation: Left</td>
            <td colspan=2>Allocation: Right</td>
        </tr>
        <tr>
            <td></td>
            <td>You get</td>
            <td>The passive recipient gets</td>
            <td>You get</td>
            <td>The passive recipient gets</td>
        </tr>
        <tr v-for='(row, index) in player.table'>
            <td><input type="radio" tabindex='-1' :value="index" onclick="showSwitchVal(this.value)" name="player.switchRow"></td>
            <td :style="{ 'background-color': (!player.switchRow || player.switchRow === '' || player.switchRow <= index) ? 'inherit' : 'lightgreen'}">{{ row[0] }}</td>
            <td :style="{ 'background-color': (!player.switchRow || player.switchRow === '' || player.switchRow <= index) ? 'inherit' : 'lightgreen'}">{{ row[1] }}</td>
            <td :style="{ 'background-color': (!player.switchRow || player.switchRow === '' || player.switchRow > index) ? 'inherit' : 'lightgreen'}">{{ row[2] }}</td>
            <td :style="{ 'background-color': (!player.switchRow || player.switchRow === '' || player.switchRow > index) ? 'inherit' : 'lightgreen'}">{{ row[3] }}</td>
        </tr>
        <tr>
            <td><input type="radio" tabindex='-1' :value="player.table.length" onclick="showSwitchVal(this.value)" name="player.switchRow"></td>
            <td colspan=4 style='text-align: left'>I always prefer the left allocation.</td>
        </tr>
    </table>
    <input type="hidden" name="player.choices">
    <p style="display: flex">
        <button :disabled="player.tableId == 0" type="button" onclick="jt.setTable(jt.vue.player.tableId-1)">Previous Table</button>
        &nbsp;
        <button :disabled="player.tableId == app.tables.length - 1" type="button" onclick="jt.setTable(jt.vue.player.tableId+1)">Next Table</button>
        <span style="flex: 1 1 auto">&nbsp;</span>
        <button :disabled="!player.allAnswered">Continue</button>
    </p>
  </div>
</div>
    <style>
    body {
      margin: auto;
    }
    table {
        border-spacing: 0px;
        border-collapse: collapse;
        font-size: inherit;
        margin-top: 1rem;
        background-color: white;
    }
    tr > td:first-child {
        border: none;
        width: unset;
    }
    td {
        border: 1px solid black;
        padding: 12px;
        padding-top: 4px;
        padding-bottom: 4px;
        text-align: center;
        width: 150px;
    }
    </style>    
    <script>
    showSwitchVal = function(val) {
        if (val.trim != null) {
            val = val.trim();
        }
        if (val == '') {
            val = -1;
        }
        if (Math.floor(val) != val) {
            val = -1;
        }
        jt.vue.player.switchRow = val;
        jt.vue.player.choices[jt.vue.player.tableId] = val;
        if (val != -1) {
            $('#switchRow').val(val);
        }
        jt.vue.player.allAnswered = true;
        for (let i=0; i<jt.vue.player.participant.socPrefTables.length; i++) {
          if (!jt.vue.player.choices[i]) {
            jt.vue.player.allAnswered = false;
            break;
          }
        }
        $('input[name="player.choices"]').val(jt.vue.player.choices)
    }
    jt.setTable = function(x) {
      jt.vue.player.tableId = x;
      jt.vue.player.switchRow = jt.vue.player.choices[jt.vue.player.tableId];
      jt.vue.player.table = jt.vue.player.participant.socPrefTables[jt.vue.player.tableId];
      const inputs = document.querySelectorAll('input[name="player.switchRow"]');
      for (let i=0; i<inputs.length; i++) {
        $(inputs[i]).prop('checked', i == jt.vue.player.switchRow);
      }
    }
    </script>
`
stage.playerEnd = function(player) {
    const participant = player.participant;
    let t = Math.floor(Math.random() * participant.socPrefTables.length)
    participant.spChosenTable = t
    const table = participant.socPrefTables[t]
    player.draw = Math.floor(Math.random()*(table.length));
    player.row = table[player.draw]
    if (player.draw < player.switchRow) {
        player.payoffs = {
            you: player.row[0],
            other: player.row[1]
        };
    } else {
        player.payoffs = {
            you: player.row[2],
            other: player.row[3]
        };
    }

    participant.socPrefPayoffs = player.payoffs;
    participant.spChosenRowPayoffs = participant.socPrefPayoffs
    participant.spActivePayoff = participant.spChosenRowPayoffs.you
}

stage.autoplay = `
    if (!jt.vue.player.switchRow || jt.vue.player.switchRow == '') {
        let x = Math.floor(Math.random()*jt.vue.player.table.length);
        showSwitchVal(x);
    } else if (jt.vue.player.tableId < jt.vue.app.tables.length - 1) {
        jt.setTable(jt.vue.player.tableId + 1);
    } else {
        jt.endStage();
    }
`