app.isStandaloneApp = false;
app.waitForAll = false;
app.stageWaitToStart = false;
app.stageWaitToEnd = false;
app.groupSize = 1;

app.insertJtreeRefAtStartOfClientHTML = false;

app.html = /*html*/`
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <script type="text/javascript" src="/participant/jtree.js"></script>
        <script src="/shared/bootstrap.min.js"></script>
        <link rel="stylesheet" href="/shared/bootstrap.min.css">
        <link rel="stylesheet" href="/13victor/counting.css">
    </head>
    <body class='hidden' style='background-color: #AAA'>
        <div id='jtree'>
            <span v-show='player.status=="playing"'>
                {{stages}}
            </span>
            <span v-show='["ready", "waiting", "finished", "done"].includes(player.status)'>
                {{waiting-screens}}
            </span>
        </div>
        {{scripts}}
    </body>
</html>
`;

// Disable automatic modification of "src" attributes, instead the full path is pre-specified. Automation does not work with dynamic values yet.
app.modifyPathsToIncludeId = false;

let choiceStage = app.newStage('choice');

choiceStage.playerStart = function (player) {
    player.matrixId = 1;
    player.question = app.matrices.questionIds[player.matrixId - 1];
    player.correctAnswer = app.matrices.answers[player.matrixId - 1];
    player.answers = [];
    for (let i = 0; i < app.matrices.questionIds.length; i++) {
        player.answers.push('no answer');
    }
}
if (app.playType === 'real') {
    choiceStage.duration = app.session.ravensDuration
}
choiceStage.addOKButtonIfNone = false;
choiceStage.activeScreen = /*html*/`
<!-- MAIN -->
<div style='display: flex'>
    <!-- LEFT -->
    <div>
        <div class="card" style='flex: 1 1 auto;'>
            <div class="card-body">
                <h5 class="card-title" v-show="app.playType === 'real'">Time left: {{ clock.minutes }}:{{clock.seconds < 10 ? ('0' + clock.seconds) : clock.seconds}}</h5>
                <h5>Please choose the element that correctly replaces the missing part!</h5>
            </div>
        </div>
        <div class="card" style='flex: 1 1 auto;'>
            <div class="card-body">
                <h5 class="card-title">Question {{ player.matrixId }}</h5>
                <img :src='"13victor/RavensPictures/" + app.imagePrefix + player.question + ".jpg"'>
            </div>
        </div>
        <div class="card" style='flex: 1 1 auto;'>
            <div class="card-body">
                <h5 class="card-title">Possible answers</h5>
                <p v-show="app.playType === 'practice'">Hint: The correct answer is {{ player.correctAnswer }}.</p>
                <div style='display: flex; flex-wrap: wrap;'>
                    <div class="answerBox" v-for='i in 8' :key='i' :id="'A' + i" onclick='jt.setAnswer(event)' :data-answer="i">
                        <label :for='"input" + i' style='pointer-events: none'>{{ i }}</label>&nbsp;
                        <input :id='"input" + i' style='pointer-events: none' type='radio' :data-answer="i" name='answer'>
                    </div>
                </div>
            </div>
        </div>
        <div v-show="app.playType === 'practice'" class="card" style='flex: 1 1 auto;'>
            <button onclick="jt.submitFormData({})">Click here when you are done with the practice questions.</button>
        </div>
    </div>
    <!-- RIGHT -->
    <div style='display: flex; max-width: 200px;'>
        <div class="card" style='flex: 1 1 auto;'>
            <div class="card-body">
                <h5 class="card-title">Question list</h5>
                <div style='display: flex; flex-wrap: wrap;'>
                    <div class="questionBox" :id="'Q' + i" v-for="i in app.matrices.questionIds.length" :key="i" :data-question="i" onclick="jt.changeToQuestion(event)">
                        {{i}}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
    <script>
jt.connected = function() {
  jt.socket.on("playerUpdate", function(player) {
    player = JSON.parse(player);
    Vue.nextTick(function() {
        let x = player.matrixId;
        for (let i=0; i<player.answers.length; i++) {
            let ans = player.answers[i];
            if (ans !== 'no answer') {
                $('#Q' + (i+1)).addClass('answered');
            }
        }
        jt.changeToQuestion({ target: { dataset: { question: x }}});
    });
  });
}
        jt.changeToQuestion = function(event) {
            $('#Q' + jt.vue.player.matrixId).removeClass('selected');
            $('.answerBox').removeClass('selected');
            $('input').prop('checked', false);
            let i = event.target.dataset.question;
            jt.vue.player.matrixId = i;
            jt.vue.player.question = jt.vue.app.matrices.questionIds[jt.vue.player.matrixId-1];
            jt.vue.player.correctAnswer = jt.vue.app.matrices.answers[jt.vue.player.matrixId-1];
            $('#Q' + i).addClass('selected');
            let answer = jt.vue.player.answers[i-1];
            if (answer !== "no answer") {
                jt.setAnswer({ target: { dataset: { answer: answer}}});
            }
        }
        jt.setAnswer = function(event) {
            $('.answerBox').removeClass('selected');
            $('input').prop('checked', false);
            let answer = event.target.dataset.answer;
            let i = jt.vue.player.matrixId;
            
            if (jt.vue.player.answers[i-1] === answer) {
                answer = 'no answer'
                $('#Q' + i).removeClass('answered');
            } else {
                $('#A' + answer).addClass('selected');
                $('#input' + answer).prop('checked', true);    
                $('#Q' + i).addClass('answered');
            }

            jt.vue.player.answers[i-1] = answer;
            jt.sendMessage('setAnswer', { matrixId: i, answer: answer });
        }

    </script>    
    <style>
    .questionBox {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 30px;
        height: 30px;
        margin: 4px;
        border: 1px solid #888;
        cursor: pointer;
    }
    .questionBox.selected {
        border: 3px solid orange;
    }
    .answerBox {
        width: 60px;
        height: 60px;
        margin: 4px;
        border: 1px solid #888;
        cursor: pointer;
        display: flex; 
        align-items: baseline; 
        justify-content: center;
        padding-top: 15px;
    }
    .answerBox.selected {
        border: 3px solid orange;
    }
    .questionBox.answered {
        background-color: #BBB;
    }
    </style>
`;

app.messages.setAnswer = function (data) {
    let player = this.participant.player;
    player.answers[data.matrixId - 1] = data.answer;
}