let results = app.newStage('results');

app.start = function() {
    if (this.started) {
        return;
    }
    this.started = true;
    let ids = Object.keys(app.session.participants)
    let foundMatching = false
    let matching = []
    while (!foundMatching) {
        let ints = []
        let a = 0
        for (let i in app.session.participants) {
            ints.push(a)
            a++
        }
        matching = Utils.shuffle(ints)
        foundMatching = true
        console.log('trying matching ' + JSON.stringify(matching))
        for (let i=0; i<this.session.participants.length; i++) {
            let part = this.session.participants[ids[i]]
            if (part.id == ids[matching[i]]) {
                foundMatching = false;
                break
            }
            if (part.partnerId == ids[matching[i]]) {
                foundMatching = false;
                break
            }
        }
        for (let i=0; i<matching.length; i++) {
            if (matching[matching[i]] === i) {
                foundMatching = false;
                break;
            }
        }
    }
    console.log('FOUND MATCH!')
    for (let i=0; i<ids.length; i++) {
        let part = this.session.participants[ids[i]]
        let activePlayer = this.session.participants[ids[matching[i]]]
        part.spPassivePayoff = activePlayer.spChosenRowPayoffs.other
    }
}

results.playerStart = function(player) {
    let participant = player.participant;
    participant.payoffs = [];
    let partNames = ['Training', 'Part A', 'Part B'];
    player.totalEuros = 0;
    for (let i=0; i<participant.chosenPayouts.length; i++) {
        let partName = partNames[i];
        for (let j=0; j<participant.chosenPayouts[i].length; j++) {
            participant.payoffs.push({
                part: partName,
                round: participant.chosenDecisions[i][j],
                allocation: participant.chosenAllocations[i][j],
                division: participant.chosenDivisions[i][j],
                account: participant.chosenGoods[i][j],
                tokens: participant.chosenPayouts[i][j],
                euros: participant.chosenEuros[i][j],
            });
            player.totalEuros += participant.chosenEuros[i][j];
        }
    }
}
results.activeScreen = `
    <h3>Your earnings</h3>
    <style>
        td {
            padding: 5px;
        }
    </style>
    <table style='font-size: inherit'>
        <tr>
            <th>Part</th>
            <th>Selected<br>round</th>
            <th>Chosen<br>allocation</th>
            <th>Division</th>
            <th>Selected<br>account</th>
            <th>Tokens<br>earned</th>
            <th>EUR<br>earned</th>
        </tr>
        <tr v-for='(payoff, index) in participant.payoffs' :key='index'>
            <td style='text-align: center'>{{payoff.part}}</td>
            <td style='text-align: center'>{{payoff.round}}</td>
            <td style='text-align: center'>X: {{payoff.allocation.x}}, Y: {{payoff.allocation.y}}</td>
            <td style='text-align: center'>{{payoff.division === '-' ? '-' : "X: " + payoff.division.x + ", Y: " + payoff.division.y}}</td>
            <td style='text-align: center'>{{payoff.account === 'x' ? 'X' : 'Y'}}</td>
            <td style='text-align: right'>{{payoff.tokens | round(2)}}</td>
            <td style='text-align: right'><b>{{payoff.euros | round(2)}}</b></td>
        </tr>

        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td><b>TOTAL</b></td>
            <td><b>{{player.totalEuros | round(2)}}</b></td>
        </tr>
    </table>
        <h4>Social preferences - active: {{ participant.spActivePayoff }}</h4>
        <h4>Social preferences - passive: {{ participant.spPassivePayoff }}</h4>
`;