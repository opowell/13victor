let results = app.newStage('results');

app.start = function() {
    if (this.started) {
        return;
    }
    this.started = true;
    let ids = Object.keys(app.session.participants)
    let foundMatching = false
    let matching = []
    while (!foundMatching) {
        let ints = []
        let a = 0
        for (let i in app.session.participants) {
            ints.push(a)
            a++
        }
        matching = Utils.shuffle(ints)
        foundMatching = true
        console.log('trying matching ' + JSON.stringify(matching))
        for (let i=0; i<this.session.participants.length; i++) {
            let part = this.session.participants[ids[i]]
            if (part.id == ids[matching[i]]) {
                foundMatching = false;
                break
            }
            if (part.partnerId == ids[matching[i]]) {
                foundMatching = false;
                break
            }
        }
        for (let i=0; i<matching.length; i++) {
            if (matching[matching[i]] === i) {
                foundMatching = false;
                break;
            }
        }
    }
    console.log('FOUND MATCH!')
    for (let i=0; i<ids.length; i++) {
        let part = this.session.participants[ids[i]]
        let activePlayer = this.session.participants[ids[matching[i]]]
        part.spPassivePayoff = activePlayer.spChosenRowPayoffs.other
    }
}

results.playerStart = function(player) {
    let participant = player.participant;
    participant.payoffs = [];
    let partNames = ['Training', 'Part A', 'Part B'];
    player.totalEuros = 0;
    for (let i=0; i<participant.chosenPayouts.length; i++) {
        let partName = partNames[i];
        for (let j=0; j<participant.chosenPayouts[i].length; j++) {
            participant.payoffs.push({
                part: partName,
                round: participant.chosenDecisions[i][j],
                allocation: participant.chosenAllocations[i][j],
                division: participant.chosenDivisions[i][j],
                account: participant.chosenGoods[i][j],
                tokens: participant.chosenPayouts[i][j],
                euros: participant.chosenEuros[i][j],
            });
            player.totalEuros += participant.chosenEuros[i][j];
        }
    }
}
results.activeScreen = `
    <h3>Part A</h3>
    <table border>
    <tr><th>Selected<br/>Round</th><th>Chosen<br/>Allocation</th><th>Division<br/>of Tokens</th><th>Selected<br/>Account</th><th>Tokens<br/>earned</th><th>EUR earned</th></tr>
    <tr>
    <th>{{ participant.payoffs[0].part }}</th>
    <th>{{ participant.payoffs[0].round }}</th>
    <th>X: {{participant.payoffs[0].allocation.x}} Y: {{participant.payoffs[0].allocation.y}}</th>
    <th>{{ participant.payoffs[0].division === '-' ? '-' : "X: " + participant.payoffs[0].division.x + "%<br>Y: " + participant.payoffs[0].division.y}} + "%"</th>
    <th>{{ participant.payoffs[0].account === 'x' ? 'X' : 'Y'}}</th>
    <th>{{ participant.payoffs[0].tokens || round(2) }}</th>
    <th>{{ participant.payoffs[0].euros || round(2) }}</th>
    </tr>
    </table>
    <div>Note: {{ Math.floor(1/app.session.exchangeRateIndiv) }} tokens are equal to 1 Euro</div>

    <h3>Part B</h3>
    <table border>
    <tr><th>Selected<br/>Round</th><th>Chosen<br/>Allocation</th><th>Division<br/>of Tokens</th><th>Selected<br/>Account</th><th>Tokens<br/>earned</th><th>EUR earned</th></tr>
    <tr>
    <th>{{ participant.payoffs[1].part }}</th>
    <th>{{ participant.payoffs[1].round }}</th>
    <th>X: {{participant.payoffs[1].allocation.x}} Y: {{participant.payoffs[1].allocation.y}}</th>
    <th>{{ participant.payoffs[1].division === '-' ? '-' : "X: " + participant.payoffs[1].division.x + "%<br>Y: " + participant.payoffs[1].division.y}} + "%"</th>
    <th>{{ participant.payoffs[1].account === 'x' ? 'X' : 'Y'}}</th>
    <th>{{ participant.payoffs[1].tokens || round(2) }}</th>
    <th>{{ participant.payoffs[1].euros || round(2) }}</th>
    </tr>
    </table>
    <div>Note: {{ Math.floor(1/app.session.exchangeRatePairs) }} tokens are equal to 1 Euro</div>

    <h3>Additional Task 1</h3>
    <table border>
    <tr><th>Selected<br/>Table</th><th>Chosen<br/>Allocation</th><th>Points earned</th><th>EUR earned</th></tr>
    <tr>
    <th>{{ participant.spChosenTable + 1 }}</th>
    <th>Active: {{ participant.spActivePayoff }}<br>Passive: {{ participant.spPassivePayoff }}</th>
    <th>{{ participant.spActivePayoff + participant.spPassivePayoff }}</th>
    <th>{{ (participant.spActivePayoff + participant.spPassivePayoff)*app.session.socPrefsExRateEuros/app.session.socPrefsExRatePoints || round(2) }}</th>
    </tr>
    </table>
    <div>Note: {{ app.session.socPrefsExRatePoints }} Points are equal to {{ app.session.socPrefsExRateEuros }} Euro</div>

    <h3>Additional Task 2</h3>
    <p>You earned 3 Euros for this task.</p>

    <h3>Additional Task 3</h3>
    <p>No earnings for this task.</p>

    <h3>Your total earnings in this experiment are: {{ player.totalEuros | round(1) }} Euros</h3>
`