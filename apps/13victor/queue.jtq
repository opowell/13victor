let trainingBudgets = [{maxX: 50, maxY: 50, id: 1}];

let treatments = [
    {
        name: 'T1: EXOG, aaa',
        fieldValues: {
            proposalType: 'EXOG',
        },
    },
    {
        name: 'T2: EXOG, bbb',
        fieldValues: {
            proposalType: 'EXOG',
        },
    },
    {
        name: 'T3: ENDOG, aaa',
        fieldValues: {
            proposalType: 'ENDOG',
        },
    },
    {
        name: 'T4: ENDOG, bbb',
        fieldValues: {
            proposalType: 'ENDOG',
        },
    },
    {
        name: 'T5: Custom',
        fieldValues: {
        },
    },
]

let treatmentNames = [];
for (let i in treatments) {
    treatmentNames.push(treatments[i].name);
}

session.addSelectOption('treatment', treatmentNames, 'The treatment determines proposal type (endogenous or exogenous), and 2) .');

session.addNumberOption('probSelX', 0.5, 0, 1, 0.01, 'Probability of selecting good x for payment.');
session.addSelectOption('proposalType', ['EXOG', 'ENDO'], 'The type of proposal.');
if (session.proposalType === 'EXOG') {
    session.addNumberOption('exogProposalX', 50, 0, 100, 1, 'The value of x for Player 1 in the exogenous proposal.');
    session.addNumberOption('exogProposalY', 50, 0, 100, 1, 'The value of y for Player 1 in the exogenous proposal.');
}
session.addNumberOption('numPracticeRounds', 1, 0, 100, 1, 'Number of practice rounds.');
session.addNumberOption('numPaidDecisionsPerRound', 1, 0, 100, 1, 'Number of paid decisions per round.');
session.addNumberOption('numRounds', 50, 0, 100, 1, 'Number of individual/pair rounds.');
session.addSelectOption('payPracticeRound', ['no', 'yes'], 'Whether or not the exchange rate is paid.');
session.addNumberOption('exchangeRatePracticeRound', 1, 0, 1000, 0.001, 'Exchange rate for practice round.');
session.addNumberOption('exchangeRateIndiv', 1, 0, 1000, 0.001, 'Exchange rate for individual part.');
session.addNumberOption('exchangeRatePairs', 1, 0, 1000, 0.001, 'Exchange rate for pairs part.');
session.addNumberOption('indivBudgetP1Weight', 1.3, 0, 10, 0.1, 'Player 1\'s individual budget as a proportion of the representative budget.');
session.addNumberOption('indivBudgetP2Weight', 0.7, 0, 10, 0.1, 'Player 2\'s individual budget as a proportion of the representative budget.');
session.addNumberOption('pairBudgetWeight', 1, 0, 10, 0.1, 'Pair budget as a proportion of the representative budget.');
session.addSelectOption('playFirst', ['individual', 'pair'], 'Which part to play first (individual or pair)');

// for (let i in treatments) {
//     let tr = treatments[i];
//     if (tr.name === session.treatment) {
//         for (let j in tr.fieldValues) {
//             session[j] = tr.fieldValues[j];
//         }
//         break;
//     }
// }

let budgetMax = 100;
let budgetMin = 10;

function drawBudgets(numBudgets) {
    let budgets = [];
    let min = budgetMin;
    let mid = budgetMax / 2;
    for (let i=0; i<numBudgets; i++) {
        let x = Utils.randomInt(min, budgetMax+1);
        let y = Utils.randomInt(min, budgetMax+1);
        if (x < mid && y < mid) {
            if (Math.random() < 0.5) {
                x += mid;
            } else {
                y += mid;
            }
        }
        budgets.push({
            maxX: x,
            maxY: y,
            id: i
        });
    }
    return budgets;
}

let exampleBudgets = drawBudgets(session.numPracticeRounds);
let paidBudgets = drawBudgets(session.numRounds);
// let shuffledBudgets = Utils.shuffle(realBudgets);

session.addApp('1_instructions.jtt');
session.addApp('counting.jtt', {
    treatment: 'individual',
    training: 'yes',
    budgets: exampleBudgets,
});

function addPairApps() {
    session.addApp('2_instructions.jtt');
    session.addApp('counting.jtt', {
        treatment: 'pair',
        training: 'no',
        budgets: paidBudgets,
    });
}

if (session.playFirst === 'pair') {
    addPairApps();
}

session.addApp('2_instructions.jtt');
session.addApp('counting.jtt', {
    treatment: 'individual',
    training: 'no',
    budgets: paidBudgets,
});

if (session.playFirst !== 'pair') {
    addPairApps();
}

session.addApp('results.jtt');
