let trainingBudgets = [{maxX: 50, maxY: 50, id: 1}];

let treatments = [
    {
        name: 'T1',
        fieldValues: {
            divisionType: 'EXOG',
            e1: 1,
            e2: 1,
            m: 1,
            d1: 1,
            d2: 1,
        },
    },
    {
        name: 'T2',
        fieldValues: {
            divisionType: 'EXOG',
            e1: 1,
            e2: 1,
            m: 2,
            d1: 0.5,
            d2: 0.5,
        },
    },
    {
        name: 'T3',
        fieldValues: {
            divisionType: 'EXOG',
            e1: 1.3,
            e2: 0.7,
            m: 2,
            d1: 0.5,
            d2: 0.5,
        },
    },
    {
        name: 'T4',
        fieldValues: {
            divisionType: 'EXOG',
            e1: 1.3,
            e2: 0.7,
            m: 2,
            d1: 0.65,
            d2: 0.35,
        },
    },
    {
        name: 'T5',
        fieldValues: {
            divisionType: 'ENDO',
            e1: 1,
            e2: 1,
            m: 2,
        },
    },
    {
        name: 'T6',
        fieldValues: {
            divisionType: 'ENDO',
            e1: 1.3,
            e2: 0.7,
            m: 2,
        },
    },
]

let treatmentNames = [];
for (let i in treatments) {
    let name = treatments[i].name;
    for (let j in treatments[i].fieldValues) {
        name += ', ' + j + '=' + treatments[i].fieldValues[j];
    }
    treatments[i].fullNanme = name;
    treatmentNames.push(name);
}

session.addSelectOption('treatment', treatmentNames, 'The treatment determines proposal type, e1, e2, m, d1 and d2.');

session.addNumberOption('probSelX', 0.5, 0, 1, 0.01, 'Probability of selecting good x for payment.');
session.addNumberOption('numPracticeRounds', 1, 0, 100, 1, 'Number of practice rounds.');
session.addNumberOption('numPaidDecisionsPerRound', 1, 0, 100, 1, 'Number of paid decisions per round.');
session.addNumberOption('numRounds', 50, 0, 100, 1, 'Number of individual/pair rounds.');
session.addSelectOption('payPracticeRound', ['no', 'yes'], 'Whether or not the practice round is paid.');
session.addNumberOption('exchangeRatePracticeRound', 1, 0, 1000, 0.001, 'Exchange rate for practice round, if paid.');
session.addNumberOption('exchangeRateIndiv', 1, 0, 1000, 0.001, 'Exchange rate for individual part.');
session.addNumberOption('exchangeRatePairs', 1, 0, 1000, 0.001, 'Exchange rate for pairs part.');
session.addSelectOption('playFirst', ['individual', 'pair'], 'Which part to play first (individual or pair)');

for (let i in treatments) {
    let tr = treatments[i];
    if (session.treatment.startsWith(tr.name)) {
        console.log('treatment = ' + session.treatment);
        for (let j in tr.fieldValues) {
            session[j] = tr.fieldValues[j];
        }
        break;
    }
}

let budgetMax = 100;
let budgetMin = 10;

function drawBudgets(numBudgets) {
    let budgets = [];
    let min = budgetMin;
    let mid = budgetMax / 2;
    for (let i=0; i<numBudgets; i++) {
        let x = Utils.randomInt(min, budgetMax+1);
        let y = Utils.randomInt(min, budgetMax+1);
        if (x < mid && y < mid) {
            if (Math.random() < 0.5) {
                x += mid;
            } else {
                y += mid;
            }
        }
        budgets.push({
            maxX: x,
            maxY: y,
            id: i
        });
    }
    return budgets;
}

let exampleBudgets = drawBudgets(session.numPracticeRounds);
let paidBudgets = drawBudgets(session.numRounds);
// let shuffledBudgets = Utils.shuffle(realBudgets);

session.addApp('1_instructions_training.jtt');
session.addApp('counting.jtt', {
    treatment: 'individual',
    text: 'training',
    budgets: exampleBudgets,
    numPaidDecisions: session.payPracticeRound === 'yes' ? 1 : 0,
    exRate: session.exchangeRatePracticeRound,
});

function addPairApps() {
    session.addApp('2_instructions_main.jtt');
    session.addApp('counting.jtt', {
        treatment: 'pair',
        numPaidDecisions: session.numPaidDecisionsPerRound,
        text: 'standard',
        budgets: paidBudgets,
        exRate: session.exchangeRatePairs,
    });
}

if (session.playFirst === 'pair') {
    addPairApps();
}

session.addApp('2_instructions_main.jtt');
session.addApp('counting.jtt', {
    treatment: 'individual',
    numPaidDecisions: session.numPaidDecisionsPerRound,
    text: 'standard',
    budgets: paidBudgets,
    exRate: session.exchangeRateIndiv,
});

if (session.playFirst !== 'pair') {
    addPairApps();
}

session.addApp('results.jtt');
