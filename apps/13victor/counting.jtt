app.isStandaloneApp = false;
app.addSelectOption('treatment', ['individual', 'pair'], 'Whether game is played individually or in pairs.');
app.addTextOption('budgets', [80, 80], 'Set of budgets to be played.');
app.addSelectOption('training', ['yes', 'no'], 'Whether or not this app is training.');

if (app.treatment === 'individual') {
    app.groupSize = 1;
}
if (app.treatment === 'pair') {
    app.groupSize = 2;
}

app.numPeriods = app.budgets.length;
app.groupMatchingType = 'PARTNER_RANDOM';
app.modifyPathsToIncludeId = false;
app.waitingScreen = /*html*/`
<div style='display: flex; flex-direction: column; margin: 5px;'>
    <div class="card">
        <div class="card-body">
            <h3>WAITING</h3>
            <p>The experiment will continue soon.</p>
        </div>
    </div>
</div>
`
app.insertJtreeRefAtStartOfClientHTML = false;

app.html = /*html*/`
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <script type="text/javascript" src="/participant/jtree.js"></script>
        <script src="/shared/bootstrap.min.js"></script>
        <script src="/13victor/highcharts.js"></script>
        <script src="/13victor/budget.js"></script>
        <script src="/13victor/Utilities.js"></script>
        <link rel="stylesheet" href="/shared/bootstrap.min.css">
    </head>
    <style>
    body {
        margin: 0px;
        max-width: unset;
        height: 100vh;
    }
    #jtree {
        background-color: unset;
        border: unset;
        min-width: unset;
        padding: unset;
        margin: unset;
    }
    .card {
        margin-top: 5px;
        margin-left: 5px;
    }
    p {
        padding: unset;
    }
    .divisionBar {
        background-color: blue;
        width: 2px;
        height: 33px;
        position: absolute;
        top: -5px;
        display: none;
        z-index: 1;
    }
    .divisionText {
        position: absolute;
        top: 29px;
        color: blue;
    }
    .highcharts-credits {
        display: none;
    }
    input[type=range] {
        -webkit-appearance: none; /* Hides the slider so that custom slider can be made */
        padding: 0px;
        width: 77%;
    }
      
      input[type=range]:focus {
        outline: none; /* Removes the blue border. You should probably do some kind of focus styling for accessibility reasons though. */
      }

      input[type=range]::-webkit-slider-thumb {
        -webkit-appearance: none;
        cursor: pointer;
        margin-top: -10px; /* You need to specify a margin in Chrome, but in Firefox and IE it is automatic */
        background-color: black;
        width: 0px;
        height: 33px;
        z-index: 2;
    }

    input[type=range]::-webkit-slider-runnable-track {
        width: 100%;
        height: 10px;
        cursor: pointer;
        z-index: 0;
        -webkit-appearance: none;
      }

      .blocker {
          position: absolute;
          width: 100%;
          height: 100%;
          background-color: rgba(218, 218, 218, 0.7);
          z-index: 10;
      }

    </style>
    <body class='hidden' style='background-color: #AAA'>
        <div id='jtree'>
            <span v-show='player.status=="playing"'>
                {{stages}}
            </span>
            <span v-show='["ready", "waiting", "finished", "done"].includes(player.status)'>
                {{waiting-screens}}
            </span>
        </div>
        {{scripts}}
    </body>
</html>
`;

let decisionStage = app.newStage('decide');
decisionStage.wrapPlayingScreenInFormTag = false;
decisionStage.addOKButtonIfNone = false;
decisionStage.groupStart = function(group) {
    group.addTable('messages');
    group.addTable('allocationProposals');
    group.addTable('divisionProposals');
    group.maxX = app.budgets[group.period.id - 1].maxX;
    group.maxY = app.budgets[group.period.id - 1].maxY;
    group.budgetId = app.budgets[group.period.id - 1].id;
    if (group.app().treatment === 'pair') {
        let p1 = group.players[0];
        let p2 = group.players[1];
        let p1x, p1y, p2x, p2y = '';
        if (group.session().allocationType === 'EXOG') {
            p1x = group.session().d1*100;
            p1y = group.session().d1*100;
            p2x = group.session().d2*100;
            p2y = group.session().d2*100;
        } else {
            // p1x = Utils.randomInt(0, 101);
            // p1y = Utils.randomInt(0, 101);
            // p2x = Utils.randomInt(0, 101);
            // p2y = Utils.randomInt(0, 101);
            p1x = '';
            p1y = '';
            p2x = '';
            p2y = '';
            p1.randomInitialAllocationProposal = {
                x: p1x,
                y: p1y,
            }
            p2.randomInitialAllocationProposal = {
                x: p2x,
                y: p2y,
            }
        }
        p1.myDivisionProposal = {
            x: p1x,
            y: p1y,
        }
        p2.myDivisionProposal = {
            x: p2x,
            y: p2y,
        };
        p1.partnerDivisionProposal = p2.myDivisionProposal;
        p2.partnerDivisionProposal = p1.myDivisionProposal;
    } 
}

decisionStage.playerStart = function(player) {
    player.toolTipX = -1;
    player.toolTipY = -1;
    player.newDivisionX = -1;
    player.newDivisionY = -1;
    player.randomInitialAllocationSelection = Math.random()*player.group.maxX;
    if (app.treatment === 'pair') {
        player.myAllocationProposal = {x: '', y: ''};
        player.partnerAllocationProposal = {x: '', y: ''};
    } else {
        if (player.idInGroup === 1) {
            player.group.maxX = player.group.maxX * app.session.e1;
            player.group.maxY = player.group.maxY * app.session.e1;
        } else {
            player.group.maxX = player.group.maxX * app.session.e2;
            player.group.maxY = player.group.maxY * app.session.e2;
        }
    }
}


decisionStage.activeScreen = /*html*/`
<div class="modal" id="confirmAllocationModal" tabindex="-1" role="dialog" style='margin-top: 30vh'>
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <div>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <p style='padding-top: 30px;'>Your chosen allocation is X={{player.toolTipX}} and Y={{player.toolTipY}}</p>
        <p>Do you want to confirm this allocation?</p>
      </div>
      <div class="modal-footer" style='justify-content: left'>
        <button type="button" class="btn btn-primary" data-dismiss="modal" onclick='jt.sendAllocationProposal()'>Yes</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
      </div>
    </div>
  </div>
</div>
<div class="modal" id="confirmDivisionModal" tabindex="-1" role="dialog" style='margin-top: 30vh'>
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <div>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <p style='padding-top: 30px;'>Your chosen division is {{player.newDivisionLetter}}={{player.newDivisionValue}}%%</p>
        <p>Do you want to confirm this division?</p>
      </div>
      <div class="modal-footer" style='justify-content: left'>
        <button type="button" class="btn btn-primary" data-dismiss="modal" onclick='setMyDivisionProposal()'>Yes</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick='cancelDivisionProposal()'>No</button>
      </div>
    </div>
  </div>
</div>
<div style='display: flex; flex-direction: column;'>
    <div style='display: flex; flex-direction: row; width: 1265px; justify-content: center;'>
        <div class="card" :style='app.treatment === "pair" ? "flex: 1 1 auto" : ""'>
            <div class="card-body">
                <div style='display: flex'>
                    <div style='flex: 1 1 auto'>
                        <div style='padding-bottom: 5px'>{{participant.numDecParts == null ? 'Practice' : (participant.numDecParts === 1 ? 'Part A' : 'Part B')}}: Round {{period.id}} of {{app.numPeriods}}</div>
                        <h5 style='padding-bottom: 5px'>Please choose your preferred allocation{{app.treatment === 'pair' ? ' and division' : ''}}!</h5>
                    </div>
                    <div 
                        v-if='
                            app.treatment === "pair" && 
                            player.myAllocationProposal.x != "" && 
                            player.partnerAllocationProposal !== null && 
                            player.partnerAllocationProposal.x !== ""
                        '
                        style='flex: 0 1 auto; padding-left: 20px;'
                    >
                        <b>Status</b>
                        <div v-if='
                            player.myAllocationProposal.x === player.partnerAllocationProposal.x && 
                            player.myAllocationProposal.y === player.partnerAllocationProposal.y'
                        class="text-success">
                            Allocation proposals DO match.
                        </div>
                        <div v-else class="text-danger">
                            Allocation proposals DO NOT match.
                        </div>
                    </div>
                </div>
                <div id="containerBargain" style='width: 600px; height: 600px'></div>
                <div id='text' style='position: absolute; background-color: rgba(255, 255, 255, 0.9); border: 3px solid #000; border-radius: 5px; padding: 2px 5px;' onclick='confirmAllocationSelection()' onmousemove='draw_plot_lines(jt.toolTipX)'>
                    X = <b id='allocationProposalX'></b>, Y = <b id='allocationProposalY'></b>
                </div>
                <div id='circle' style='background-color: black; height: 10px; border-radius: 5px; width: 10px; position: absolute;' onclick='confirmAllocationSelection()' onmousemove='draw_plot_lines(jt.toolTipX)'></div>
            </div>
        </div>
        <div style='display: flex; flex-direction: column; flex: 0 0 360px;' v-if="app.treatment === 'pair'">
            <div class="card" style='flex: 1 1 auto;'>
                <div class='blocker' v-show='player.myAllocationProposal.x !== "" && player.myAllocationProposal.x === player.partnerAllocationProposal.x'></div>
                <div class="card-body">
                    <h5 class="card-title">My allocation proposal</h5>
                    <div v-if='player.myAllocationProposal != null'>
                        X: {{player.myAllocationProposal.x}}<br>
                        Y: {{player.myAllocationProposal.y}}<br>
                    </div>
                    <div v-else>None.</div>
                </div>
            </div>
            <div class="card" style='flex: 1 1 auto;'>
                <div class='blocker' v-show='player.myAllocationProposal.x !== "" && player.myAllocationProposal.x === player.partnerAllocationProposal.x'></div>
                <div class="card-body" style='color: blue'>
                    <h5 class="card-title">Other's allocation proposal</h5>
                    <div v-if='player.partnerAllocationProposal != null && player.myAllocationProposal.x !== ""'>
                        X: {{player.partnerAllocationProposal.x}}<br>
                        Y: {{player.partnerAllocationProposal.y}}<br>
                    </div>
                    <div v-else>None.</div>
                </div>
            </div>
            <div class="card" v-if='app.session.allocationType === "EXOG"' style='flex: 1 1 auto;'>
                <div class="card-body">
                    <h5 class="card-title">Division</h5>
                    <div>My share of the eventually agreed X: <b>{{player.myDivisionProposal.x}}%</b></div>
                    <div>My share of the eventually agreed Y: <b>{{player.myDivisionProposal.y}}%</b></div>
                </div>
            </div>
            <div class="card" v-if='app.session.allocationType === "ENDO"' style='flex: 1 1 auto;'>
                <div class='blocker' v-show='player.myAllocationProposal == null || player.myAllocationProposal.x == "" || player.partnerAllocationProposal.x == ""'></div>
                <div class="card-body">
                    <h5 class="card-title">My proposed division</h5>
                    <div style='height: 120px;'>
                        <div>My share of the eventually agreed X: <b>{{(player.myDivisionProposal == null || player.myDivisionProposal.x === '') ? '' : (player.myDivisionProposal.x + "%")}}</b></div>
                        <br>
                        <span style='flex: 0 0 auto'>0%</span>
                        <span style='position: relative'>
                            <span id='myDivisionXBar' class='divisionBar'></span>
                            <span id='myDivisionXText' class='divisionText'></span>
                            <input id="myDivisionX" value='0' style='position: relative' type="range" min="0" max="100" step="1" onchange="confirmDivisionSelection(event)"> 
                        </span>
                        <span style='flex: 0 0 auto'>100%</span>
                        <br>
                    </div>
                    <div style='height: 120px;'>
                        <div>My share of the eventually agreed Y: <b>{{(player.myDivisionProposal == null || player.myDivisionProposal.y === '') ? '' : (player.myDivisionProposal.y + "%")}}</b></div>
                        <br>
                        0%
                        <span style='position: relative'>
                            <span id='myDivisionYBar' class='divisionBar'></span>
                            <span id='myDivisionYText' class='divisionText'></span>
                            <input id="myDivisionY" value='0' style='position: relative' type="range" min="0" max="100" step="1" onchange="confirmDivisionSelection(event)">
                        </span>
                        100%
                        <br>
                    </div>
                    <div style='display: flex'>
                        <span style='width: 20px; margin-top: 11px; margin-right: 5px; height: 2px; background-color: blue'></span>
                        <span style='color: blue'>Other's division proposal</span>
                    </div>
                </div>
            </div>
            <div v-show='false' class="card" style='flex: 1 1 auto;'>
                <div class='blocker' v-show='player.myDivisionProposal.x == "" || player.partnerDivisionProposal.x == ""'></div>
                <div class="card-body">
                    <div>
                        <button 
                        :disabled='
                    player.myAllocationProposal.x !== player.partnerAllocationProposal.x ||
                    player.myAllocationProposal.y !== player.partnerAllocationProposal.y ||
                    player.myDivisionProposal.x !== 100 - player.partnerDivisionProposal.x ||
                    player.myDivisionProposal.y !== 100 - player.partnerDivisionProposal.y'
                        onclick='endBargaining()'>NEXT DECISION</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="card" v-if="app.treatment === 'pair'">
        <div class='blocker' v-show='player.myAllocationProposal.x == "" || player.partnerAllocationProposal.x == ""'></div>
        <div class="card-body">
            <h5 class="card-title">Chat</h5>
            <div style='display: flex;'>
                <input style='flex: 1 1 auto' type='text' id='chatMessageInput' onkeyup='keyUp(event)' placeholder='Enter message here...'>
                <button type='button' onclick='sendChatMessageToServer()'>Send message</button>
            </div>
            <div style='overflow-y: scroll; height: 100px; width: 100%; border: 2px solid #888; padding: 5px; margin-top: 5px;'>
                <div v-for='message in group.messages.slice().reverse()' :key='message.id' v-bind:style="message.player == player.id ? {color: 'black'} : {color: 'blue'}">
                    <span v-if='message.player == player.id'><b>ME:</b></span>
                    <span v-else><b>PARTNER:</b></span>
                    {{ message.content }}
                </div>
            </div>
        </div>
    </div>
</div>
        <script>
let sX = document.createElement("style");
document.head.appendChild(sX);
sX.textContent = '';
let sY = document.createElement("style");
document.head.appendChild(sY);
sY.textContent = '';
showSliderThumb = function(letter) {
    window['s' + letter].textContent = \`
#myDivision\${letter}::-webkit-slider-thumb {
    width: 2px !important;
}
\`;
}
        endBargaining = function() {
            jt.sendMessage('endBargaining');
        }
        keyUp = function(event) {
            // Number 13 is the "Enter" key on the keyboard
            if (event.keyCode === 13) {
              // Cancel the default action, if needed
              event.preventDefault();
              sendChatMessageToServer();
            }
        }
        showMyDivisionProposal = function(letter) {
            let el = $('#myDivision' + letter)[0];
            if (el == null) {
                return;
            }
            let value = el.value;
            if (isNaN(value)) {
                return;
            }
            el.style.background = 'linear-gradient(to right, #666666 0%, #666666 ' + value + '%, #AAAAAA ' + value + '%, #AAAAAA 100%)';
        }
        setMyDivisionProposal = function() {
            showSliderThumb(jt.vue.player.newDivisionLetter);
            let el = $('#myAlloc' + jt.vue.player.newDivisionLetter)[0];
            let value = el.value;
            showMyDivisionProposal(jt.vue.player.newDivisionLetter);
            let out = {};
            out[jt.vue.player.newDivisionLetter] = value;
            jt.sendMessage('setMyDivisionProposal', out);
        }
        jt.sendAllocationProposal = function() {
            let proposal = {
                x: jt.toolTipX,
                y: jt.toolTipY,
            };
            jt.sendMessage('setMyAllocationProposal', proposal);
        }
        sendChatMessageToServer = function() {
            let content = $('#chatMessageInput').val();
            jt.sendMessage("sendMessage", content);
            $('#chatMessageInput').val('');
        }
        jt.messages.setMyDivisionProposal = function(proposal) {
            jt.vue.player.myDivisionProposal = proposal;
        }
        jt.messages.setPartnerDivisionProposal = function(proposal) {
            jt.vue.player.partnerDivisionProposal = proposal;
            if (isNumeric(proposal.x)) {
                jt.setProposal('X', 100 - proposal.x);
            }
            if (isNumeric(proposal.y)) {
                jt.setProposal('Y', 100 - proposal.y);
            }
        }
        jt.setProposal = function(letter, value) {
            if (isNaN(value)) {
                return;
            }
            let left = 1.27*value;
            $('#myDivision' + letter + 'Bar').css('left', value + '%');
            $('#myDivision' + letter + 'Bar').css('display', 'flex');
            $('#myDivision' + letter + 'Text').text(value);
            let adjLeft = 3;
            if (value >= 10 && value < 100) {
                adjLeft = 6;
            } else if (value >= 100) {
                adjLeft = 11;
            }
            $('#myDivision' + letter + 'Text').css('left', 'calc(' + value + '% - ' + adjLeft + 'px)');
        }

        </script>
    `

app.messages.endBargaining = function() {
    let player = this.participant.player;
    let group = player.group;
    if (player.stage.id === 'decide') {
        // Player exits decision stage after making proposal.
        player.endStage(true);
        return;
    } else {
        // Only leave bargaining stage if valid proposals have been made.
        let validProposals = app.areProposalsValid(group);
        if (validProposals) {
            group.forceEndStage(player.stage);
        }
    }
}

app.messages.sendMessage = function(content) {
    let player = this.participant.player;
    let group = player.group;
    let timePosted = player.timeInStage();
    let message = {
        content,
        player: player.id, 
        timePosted,
    };
    group.messages.new(message); // Notifies group's players about new message.
    for (let p in group.players) {
        group.players[p].saveAndUpdate();
    }
}

app.messages.setMyDivisionProposal = function(proposal) {
    let player = this.participant.player;
    let group = player.group;
    player.myDivisionProposal = proposal;
    player.emit('setMyDivisionProposal', proposal);
    let partner = group.playersExcept(player)[0];
    partner.partnerDivisionProposal = proposal;
    partner.emit('setPartnerDivisionProposal', proposal);
    let timePosted = player.timeInStage();
    let message = {
        proposal,
        player: player.id, 
        timePosted,
    };
    group.divisionProposals.new(message);
}

decisionStage.playerEnd = function(player) {
    if (player.group.period.id == 1) {
        player.participant.outcomes = [];
    }
    player.participant.outcomes.push(player.myAllocationProposal);
}

app.participantEnd = function(participant) {
    if (participant.chosenPayouts == null) {
        participant.chosenDecisions = [];
        participant.chosenPayouts = [];
        participant.chosenGoods = [];
    }

    let N = app.session.numPaidDecisionsPerRound;

    let ints = [];
    for (let i=0; i<app.numPeriods; i++) {
        ints.push(i);
    }
    Utils.shuffle(ints);
    ints = ints.splice(0, N);
    let payout = 0;
    let chosenDecisions = [];
    let selectedGoods = [];
    for (let i=0; i<ints.length; i++) {
        let selectedGood = (Math.random() < app.session.probSelX) ? 'x' : 'y';
        let p = ints[i];
        chosenDecisions.push(p+1);
        selectedGoods.push(selectedGood);
        payout += participant.outcomes[p][selectedGood];
    }
    participant.chosenDecisions.push(chosenDecisions);
    participant.chosenGoods.push(selectedGoods);
    participant.chosenPayouts.push(payout);
}

app.messages.setMyAllocationProposal = function(proposal) {
    // 'this' is the client sending the proposal.
    let player = this.participant.player;
    player.myAllocationProposal = proposal;
    player.emit('setMyAllocationProposal', proposal);
    let group = player.group;
    let partner = null;
    if (app.treatment === 'pair') {
        partner = group.playersExcept(player)[0];
        partner.partnerAllocationProposal = proposal;
        partner.emit('setPartnerAllocationProposal', proposal);
    }
    let timePosted = player.timeInStage();
    let message = {
        proposal,
        player: player.id, 
        timePosted,
    };
    group.allocationProposals.new(message);

    if (player.app().treatment !== 'pair') {
        // Player exits decision stage after making proposal.
        player.endStage(true);
        // group.endStage(player.stage, false);
    } else {
        player.saveAndUpdate();
        partner.saveAndUpdate();
    }

}

// Returns sum of all individual player proposals (for x and y), or false if not all players have made a proposal yet.
app.areProposalsValid = function(group) {
    let p1 = group.players[0];
    let p2 = group.players[1];
    
    if (
        p1.myProposal.x != p2.myProposal.x ||
        p1.myProposal.y != p2.myProposal.y
    ) {
        return false;
    }

    if (p1.myDivisionProposal.x + p2.myDivisionProposal.x != 100 ||
        p1.myDivisionProposal.y + p2.myDivisionProposal.y != 100
    ) {
        return false;
    }

    return true;
    
}

