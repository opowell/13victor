app.isStandaloneApp = false;
app.addSelectOption('treatment', ['individual', 'pair'], 'Whether game is played individually or in pairs.');
app.addTextOption('budgets', [80, 80], 'Set of budgets to be played.');
app.addSelectOption('training', ['yes', 'no'], 'Whether or not this app is training.');

if (app.treatment === 'individual') {
    app.groupSize = 1;
}
if (app.treatment === 'pair') {
    app.groupSize = 2;
}

app.numPeriods = app.budgets.length;
app.groupMatchingType = 'PARTNER_RANDOM';
app.modifyPathsToIncludeId = false;
app.waitingScreen = `
<div style='display: flex; flex-direction: column; margin: 5px;'>
    <div class="card">
        <div class="card-body">
            <h3>WAITING</h3>
            <p>The experiment will continue soon.</p>
        </div>
    </div>
</div>
`
app.insertJtreeRefAtStartOfClientHTML = false;

// <script src="/13victor/Utilities.js"></script>

app.html = `
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <script type="text/javascript" src="/participant/jtree.js"></script>
        <script src="/shared/bootstrap.min.js"></script>
        <script src="/13victor/highcharts.js"></script>
        <script src="/13victor/budget.js"></script>
        <script src="/13victor/Utilities.js"></script>
        <link rel="stylesheet" href="/shared/bootstrap.min.css">
    </head>
    <style>
    body {
        margin: 0px;
        max-width: unset;
        height: 100vh;
    }
    #jtree {
        background-color: unset;
        border: unset;
        min-width: unset;
        padding: unset;
        margin: unset;
    }
    .card {
        margin-top: 5px;
        margin-left: 5px;
    }
    p {
        padding: unset;
    }
    .allocBar {
        background-color: blue;
        width: 2px;
        height: 33px;
        position: absolute;
        top: -3px;
        display: none;
        z-index: 1;
    }
    .allocText {
        position: absolute;
        top: 29px;
        color: blue;
    }
    .highcharts-credits {
        display: none;
    }
    input[type=range] {
        -webkit-appearance: none; /* Hides the slider so that custom slider can be made */
        padding: 0px;
        width: 80%;
    }
      
      input[type=range]:focus {
        outline: none; /* Removes the blue border. You should probably do some kind of focus styling for accessibility reasons though. */
      }

      input[type=range]::-webkit-slider-thumb {
        -webkit-appearance: none;
        cursor: pointer;
        margin-top: -10px; /* You need to specify a margin in Chrome, but in Firefox and IE it is automatic */
        background-color: black;
        width: 2px;
        height: 33px;
        z-index: 2;
    }

    input[type=range]::-webkit-slider-runnable-track {
        width: 100%;
        height: 10px;
        cursor: pointer;
        z-index: 0;
        -webkit-appearance: none;
      }

      .blocker {
          position: absolute;
          width: 100%;
          height: 100%;
          background-color: rgba(218, 218, 218, 0.7);
          z-index: 10;
      }

    </style>
    <body class='hidden' style='background-color: #AAA'>
        <div id='jtree'>
            <span v-show='player.status=="playing"'>
                {{stages}}
            </span>
            <span v-show='["ready", "waiting", "finished", "done"].includes(player.status)'>
                {{waiting-screens}}
            </span>
        </div>
        {{scripts}}
    </body>
</html>
`;

let decisionStage = app.newStage('decide');
decisionStage.wrapPlayingScreenInFormTag = false;
decisionStage.addOKButtonIfNone = false;
decisionStage.groupStart = function(group) {
    group.addTable('messages');
    group.addTable('budgetProposals');
    group.addTable('allocationProposals');
    group.maxX = app.budgets[group.period.id - 1].maxX;
    group.maxY = app.budgets[group.period.id - 1].maxY;
    group.budgetId = app.budgets[group.period.id - 1].id;
    if (group.app().treatment === 'pair') {
        let p1 = group.players[0];
        let p2 = group.players[1];
        let p1x, p1y, p2x, p2y = '';
        if (group.session().proposalType === 'EXOG') {
            p1x = group.session().exogProposalX - 0;
            p1y = group.session().exogProposalY - 0;
            p2x = 100 - p1x;
            p2y = 100 - p1y;
        } else {
            p1x = Utils.randomInt(0, 101);
            p1y = Utils.randomInt(0, 101);
            p2x = Utils.randomInt(0, 101);
            p2y = Utils.randomInt(0, 101);
            p1.randomInitialProposal = {
                x: p1x,
                y: p1y,
            }
            p2.randomInitialProposal = {
                x: p2x,
                y: p2y,
            }
        }
        p1.myAllocationProposal = {
            x: p1x,
            y: p1y,
        }
        p2.myAllocationProposal = {
            x: p2x,
            y: p2y,
        };
        p1.partnerAllocationProposal = p2.myAllocationProposal;
        p2.partnerAllocationProposal = p1.myAllocationProposal;
    } 
}

decisionStage.playerStart = function(player) {
    player.randomInitialSelection = Math.random()*player.group.maxX;
    if (app.treatment === 'pair') {
        player.myProposal = {x: '', y: ''};
        player.partnerProposal = {x: '', y: ''};
    } else {
        if (player.idInGroup === 1) {
            player.group.maxX = player.group.maxX * app.session.indivBudgetP1Weight;
            player.group.maxY = player.group.maxY * app.session.indivBudgetP1Weight;
        } else {
            player.group.maxX = player.group.maxX * app.session.indivBudgetP2Weight;
            player.group.maxY = player.group.maxY * app.session.indivBudgetP2Weight;
        }
    }
}

decisionStage.activeScreen = `
<div style='display: flex;'>
    <div style='display: flex; flex-direction: column;'>
        <div class="card">
            <div class="card-body">
                <h3 v-if='app.training === "no"'>Decision {{period.id}} of {{app.numPeriods}}</h3>
                <h3 v-else>Example</h3>
                <div id="containerBargain" style='width: 600px; height: 600px'></div>
                <div id='text' style='position: absolute; background-color: rgba(255, 255, 255, 0.9); border: 3px solid #000; border-radius: 5px; padding: 2px 5px;' onclick='confirmSelection()' onmouseover='draw_plot_lines(jt.toolTipX)'>
                    X = <b id='proposalX'></b>, Y = <b id='proposalY'></b>
                </div>
                <div id='circle' style='background-color: black; height: 10px; border-radius: 5px; width: 10px; position: absolute;' onclick='confirmSelection()' onmouseover='draw_plot_lines(jt.toolTipX)'></div>
            </div>
        </div>
        <div class="card" v-if="app.treatment === 'pair'">
            <div class='blocker' v-show='player.myProposal.x == "" || player.partnerProposal.x == ""'></div>
            <div class="card-body">
                <h5 class="card-title">Chat</h5>
                <div style='display: flex;'>
                    <input style='flex: 1 1 auto' type='text' id='msgInput' onkeyup='keyUp(event)' placeholder='Enter message here...'>
                    <button type='button' onclick='sendMsgToServer()'>Send message</button>
                </div>
                <div style='overflow-y: scroll; height: 100px; width: 100%; border: 2px solid #888; padding: 5px; margin-top: 5px;'>
                    <div v-for='message in group.messages.slice().reverse()' :key='message.id' v-bind:style="message.player == player.id ? {color: 'black'} : {color: 'blue'}">
                        <span v-if='message.player == player.id'><b>ME:</b></span>
                        <span v-else><b>PARTNER:</b></span>
                        {{ message.content }}
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div style='display: flex; flex-direction: column;' v-if="app.treatment === 'pair'">
        <div class="card" style='flex: 1 1 auto;'>
            <div class='blocker' v-show='player.myProposal.x == "" || player.partnerProposal.x == ""'></div>
            <div class="card-body">
                <h5 class="card-title">My budget proposal</h5>
                <div v-if='player.myProposal != null'>
                    X: {{player.myProposal.x}}<br>
                    Y: {{player.myProposal.y}}<br>
                </div>
                <div v-else>None.</div>
            </div>
        </div>
        <div class="card" style='flex: 1 1 auto;'>
            <div class='blocker' v-show='player.myProposal.x == "" || player.partnerProposal.x == ""'></div>
            <div class="card-body" style='color: blue'>
                <h5 class="card-title">Partner's budget proposal</h5>
                <div v-if='player.partnerProposal != null'>
                    X: {{player.partnerProposal.x}}<br>
                    Y: {{player.partnerProposal.y}}<br>
                </div>
                <div v-else>None.</div>
            </div>
        </div>
        <div class="card" v-if='app.session.proposalType === "EXOG"' style='flex: 1 1 auto;'>
            <div class='blocker' v-show='player.myProposal.x == "" || player.partnerProposal.x == ""'></div>
            <div class="card-body">
                <h5 class="card-title">Allocation</h5>
                <div>My share of the eventually agreed X: <b>{{app.session.exogProposalX}}%</b></div>
                <div>My share of the eventually agreed Y: <b>{{app.session.exogProposalY}}%</b></div>
            </div>
        </div>
        <div class="card" v-if='app.session.proposalType === "ENDO"' style='flex: 1 1 auto;'>
            <div class='blocker' v-show='player.myProposal.x == "" || player.partnerProposal.x == ""'></div>
            <div class="card-body">
                <h5 class="card-title">My allocation proposal</h5>
                <div style='height: 120px;'>
                    <div style='flex: 0 0 300px'>My share of the eventually agreed X: <b>{{player.myAllocationProposal.x}}%</b></div>
                    <br>
                    <span style='flex: 0 0 auto'>0%</span>
                    <span style='position: relative'>
                        <span id='myAllocXBar' class='allocBar'></span>
                        <span id='myAllocXText' class='allocText'></span>
                        <input id="myAllocX" style='position: relative' type="range" min="0" max="100" step="1" onchange="setMyAllocationProposal()"> 
                    </span>
                    <span style='flex: 0 0 auto'>100%</span>
                    <br>
                </div>
                <div style='height: 120px;'>
                    <div style='flex: 0 0 300px'>My share of the eventually agreed Y: <b>{{player.myAllocationProposal.y}}%</b></div>
                    <br>
                    0%
                    <span style='position: relative'>
                        <span id='myAllocYBar' class='allocBar'></span>
                        <span id='myAllocYText' class='allocText'></span>
                        <input id="myAllocY" style='position: relative' type="range" min="0" max="100" step="1" onchange="setMyAllocationProposal()">
                    </span>
                    100%
                    <br>
                </div>
            </div>
        </div>
        <div class="card" style='display: none'>
            <div class='blocker' v-show='player.myProposal.x == "" || player.partnerProposal.x == ""'></div>
            <div class="card-body">
                <h5 class="card-title">Partner's allocation proposal</h5>
                <div style='display: flex;'>
                    <span style='flex: 0 0 150px'>My share of X: <b>{{player.partnerAllocationProposal.x + '' == '' ? '' : 100 - player.partnerAllocationProposal.x}}%</b></span>
                </div>
                <div style='display: flex'>
                    <span style='flex: 0 0 150px'>My share of Y: <b>{{player.partnerAllocationProposal.y + '' == '' ? '' : 100 - player.partnerAllocationProposal.y}}%</b></span>
                </div>
            </div>
        </div>
        <div class="card" style='flex: 1 1 auto;'>
            <div class='blocker' v-show='player.myProposal.x == "" || player.partnerProposal.x == ""'></div>
            <div class="card-body">
                <h5 class="card-title">Status</h5>
                <div style='min-width: 360px' v-if='
                    player.myProposal.x === player.partnerProposal.x && 
                    player.myProposal.y === player.partnerProposal.y'
                class="card-title text-success">
                    Budget proposals DO match.
                </div>
                <div v-else style='min-width: 360px' 
                class="card-title text-danger">
                    Budget proposals DO NOT match.
                    <!-- button v-if='player.partnerProposal.x != ""' onclick='matchBudgetProposal()'>Match</!-->
                </div>
                <template v-if='app.session.proposalType === "ENDO"'>
                    <div v-if='
                        player.myAllocationProposal.x === 100 - player.partnerAllocationProposal.x && 
                        player.myAllocationProposal.y === 100 - player.partnerAllocationProposal.y'
                    class="card-title text-success">Allocation proposals DO match.</div>
                    <div v-else
                    class="card-title text-danger">
                        Allocation proposals DO NOT match.
                        <!-- button v-if='player.partnerAllocationProposal.x != ""' onclick='matchAllocationProposal()'>Match</!-->      
                    </div>
                </template>
                <div>
                    <button 
                    :disabled='
                player.myProposal.x !== player.partnerProposal.x ||
                player.myProposal.y !== player.partnerProposal.y ||
                player.myAllocationProposal.x !== 100 - player.partnerAllocationProposal.x ||
                player.myAllocationProposal.y !== 100 - player.partnerAllocationProposal.y'
                    onclick='endBargaining()'>NEXT DECISION</button>
                </div>
            </div>
        </div>
    </div>
</div>
        <script>
        endBargaining = function() {
            jt.sendMessage('endBargaining');
        }
        matchBudgetProposal = function() {
            jt.sendMessage('propose', jt.vue.player.partnerProposal);
        }
        matchAllocationProposal = function() {
            let proposal = {
                x: 100 - jt.vue.player.partnerAllocationProposal.x,
                y: 100 - jt.vue.player.partnerAllocationProposal.y
            }
            $('#myAllocX').val(proposal.x);
            $('#myAllocY').val(proposal.y);
            setMyAllocationProposal();
        }
        keyUp = function(event) {
            // Number 13 is the "Enter" key on the keyboard
            if (event.keyCode === 13) {
              // Cancel the default action, if needed
              event.preventDefault();
              sendMsgToServer();
            }
        }
        showMyProposal = function() {
            let myXEl = $('#myAllocX')[0];
            let myYEl = $('#myAllocY')[0];
            if (myXEl == null) {
                return;
            }
            let myX = myXEl.value;
            let myY = myYEl.value;
            if (isNaN(myX)) {
                return;
            }
            myXEl.style.background = 'linear-gradient(to right, #666666 0%, #666666 ' + myX + '%, #AAAAAA ' + myX + '%, #AAAAAA 100%)';
            myYEl.style.background = 'linear-gradient(to right, #666666 0%, #666666 ' + myY + '%, #AAAAAA ' + myY + '%, #AAAAAA 100%)';
        }
        setMyAllocationProposal = function() {
            let myXEl = $('#myAllocX')[0];
            let myYEl = $('#myAllocY')[0];
            let myX = myXEl.value;
            let myY = myYEl.value;
            showMyProposal();
            jt.sendMessage('setMyAllocationProposal', {x: myX, y: myY});
        }
        sendMsgToServer = function() {
            let content = $('#msgInput').val();
            jt.sendMessage("sendMessage", content);
            $('#msgInput').val('');
        }
        jt.messages.setMyAllocationProposal = function(proposal) {
            jt.vue.player.myAllocationProposal = proposal;
        }
        jt.messages.setPartnerAllocationProposal = function(proposal) {
            jt.vue.player.partnerAllocationProposal = proposal;
            jt.setProposal('X', 100 - proposal.x);
            jt.setProposal('Y', 100 - proposal.y);
        }
        jt.setProposal = function(letter, value) {
            if (isNaN(value)) {
                return;
            }
            let left = 1.27*value;
            $('#myAlloc' + letter + 'Bar').css('left', value + '%');
            $('#myAlloc' + letter + 'Bar').css('display', 'flex');
            $('#myAlloc' + letter + 'Text').text(value);
            let adjLeft = 3;
            if (value >= 10 && value < 100) {
                adjLeft = 6;
            } else if (value >= 100) {
                adjLeft = 11;
            }
            $('#myAlloc' + letter + 'Text').css('left', 'calc(' + value + '% - ' + adjLeft + 'px)');
        }

        </script>
    `

app.messages.endBargaining = function() {
    let player = this.participant.player;
    let group = player.group;
    if (player.stage.id === 'decide') {
        // Player exits decision stage after making proposal.
        player.endStage(true);
        return;
    } else {
        // Only leave bargaining stage if valid proposals have been made.
        let validProposals = app.areProposalsValid(group);
        if (validProposals) {
            group.forceEndStage(player.stage);
        }
    }
}

app.messages.sendMessage = function(content) {
    let player = this.participant.player;
    let group = player.group;
    let timePosted = player.timeInStage();
    let message = {
        content,
        player: player.id, 
        timePosted,
    };
    group.messages.new(message); // Notifies group's players about new message.
}

app.messages.setMyAllocationProposal = function(proposal) {
    let player = this.participant.player;
    let group = player.group;
    player.myAllocationProposal = proposal;
    player.emit('setMyAllocationProposal', proposal);
    let partner = group.playersExcept(player)[0];
    partner.partnerAllocationProposal = proposal;
    partner.emit('setPartnerAllocationProposal', proposal);
    let timePosted = player.timeInStage();
    let message = {
        proposal,
        player: player.id, 
        timePosted,
    };
    group.allocationProposals.new(message);
}

decisionStage.playerEnd = function(player) {
    if (player.group.period.id == 1) {
        player.participant.outcomes = [];
    }
    player.participant.outcomes.push(player.myProposal);
}

app.participantEnd = function(participant) {
    if (participant.chosenPayouts == null) {
        participant.chosenDecisions = [];
        participant.chosenPayouts = [];
        participant.chosenGoods = [];
    }

    let selectedGood = (Math.random() < app.session.probSelX) ? 'x' : 'y';
    let p = Utils.randomInt(0, app.numPeriods);
    participant.chosenDecisions.push(p+1);
    participant.chosenGoods.push(selectedGood);
    participant.chosenPayouts.push(participant.outcomes[p][selectedGood]);
}

app.messages.propose = function(proposal) {
    // 'this' is the client sending the proposal.
    let player = this.participant.player;
    player.myProposal = proposal;
    let group = player.group;
    let partner = null;
    if (app.treatment === 'pair') {
        partner = group.playersExcept(player)[0];
        partner.partnerProposal = proposal;
    }
    let timePosted = player.timeInStage();
    let message = {
        proposal,
        player: player.id, 
        timePosted,
    };
    group.budgetProposals.new(message);

    if (player.app().treatment !== 'pair') {
        // Player exits decision stage after making proposal.
        player.endStage(true);
        // group.endStage(player.stage, false);
    } else {
        player.saveAndUpdate();
        partner.saveAndUpdate();
    }

}

// Returns sum of all individual player proposals (for x and y), or false if not all players have made a proposal yet.
app.areProposalsValid = function(group) {
    let p1 = group.players[0];
    let p2 = group.players[1];
    
    if (
        p1.myProposal.x != p2.myProposal.x ||
        p1.myProposal.y != p2.myProposal.y
    ) {
        return false;
    }

    if (p1.myAllocationProposal.x + p2.myAllocationProposal.x != 100 ||
        p1.myAllocationProposal.y + p2.myAllocationProposal.y != 100
    ) {
        return false;
    }

    return true;
    
}