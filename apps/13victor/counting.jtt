app.isStandaloneApp = false;

if (app.treatment === 'individual') {
    app.groupSize = 1;
}
if (app.treatment === 'pair') {
    app.groupSize = 2;
}

// Draw budget lines.
// - intersect at least one axis at or above the 50-token level
// - intersect both axes at or below the 100-token level.
function drawBudgetMax1(A) {
  return Utils.randomInt(A/2, A+1);
}

function drawBudgetMax2(A) {
  return Utils.randomInt(A/10, A+1);
}

function drawBudget(A) {
  let x = drawBudgetMax1(A);
  let y = drawBudgetMax2(A);
  // 50% chance to switch.
  if (Math.random() < 0.5) {
      let z = x;
      x = y;
      y = z;
  }
  return {maxX: x, maxY: y}
}

app.numPeriods = app.numRegularBudgets + app.numAddBudgets;
app.groupMatchingType = 'PARTNER_RANDOM';
app.modifyPathsToIncludeId = false;
app.waitingScreen = /*html*/`
<div style='display: flex; flex-direction: column; margin: 5px;'>
    <div class="card">
        <div class="card-body">
            <h3>WAITING</h3>
            <p>The experiment will continue soon.</p>
        </div>
    </div>
</div>
`
app.insertJtreeRefAtStartOfClientHTML = false;

app.fig1Src = 'unknown'
app.fig2Src = 'unknown'
app.fig3Src = 'unknown'
switch (app.session.color) {
  case 'magenta':
    app.fig1Src = 'individualt1.png'
    app.fig2Src = 'groupfirstt1.png'
    app.fig3Src = 'groupt1.png'
    break;
  case 'cyan':
    app.fig1Src = 'individualt2.png'
    app.fig2Src = 'groupfirstt2.png'
    app.fig3Src = 'groupt2.png'
    break;
  case 'yellow':
    app.fig1Src = 'individualt5.png'
    app.fig2Src = 'groupfirstt5.png'
    app.fig3Src = 'groupt3.png'
    break;
}

app.html = /*html*/`
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <script type="text/javascript" src="/participant/jtree.js"></script>
        <script src="/shared/bootstrap.min.js"></script>
        <script src="/13victor/highcharts.js"></script>
        <script src="/13victor/budget.js"></script>
        <script src="/13victor/Utilities.js"></script>
        <link rel="stylesheet" href="/shared/bootstrap.min.css">
        <link rel="stylesheet" href="/13victor/counting.css">
    </head>
    <body class='hidden' style='background-color: #AAA'>
      <div id='jtree'>
        <div v-if="player.page === 'instructions'" style='background-color: #aaa; height: 100%; align-items: flex-start; display: flex; justify-content: center'>
          <div class="card">
            <div v-if="app.treatment === 'pair'" class="card-body" style="display: flex">
<div v-if="player.instructionsPage == 1" style="flex: 1 1 100px; max-width: 700px;">
Page 1
</div>
<div v-if="player.instructionsPage == 2" style="flex: 1 1 100px; max-width: 700px;">
<h4>Instructions for Part {{participant.numDecParts === 1 ? 'A' : 'B'}}</h4>
<p>
This Part of the experiment will consist of {{ app.session.numRounds + app.session.numAddRounds }} decision rounds.
</p>
<p>
Recall that in each round, you will be asked to allocate tokens between two
accounts, labeled X and Y. Each choice will involve choosing a point on a
line representing possible token allocations.
</p>
<p>
<span v-if="app.session.playFirst === 'individual'">But instead of doing so individually as in Part A, you will now do so
jointly with another participant.</span>
<span v-if="app.session.playFirst === 'pair'">But instead of doing so individually as described above, you will now do so
jointly with another participant.</span>
For this purpose, at the beginning of this part of the experiment you will be randomly matched with one other
participant in the room. You will then stay matched with this other
participant for all decision rounds in Part {{participant.numDecParts === 1 ? 'A' : 'B'}}. We will refer to the other
participant you will be matched with as the <q>other</q>.
</p>
<p>
The decision screen that you will use to make your decisions in this part
looks like the one in Figure 2. The main panel in the decision screen in Figure 2 is similar to the one you saw <span v-if="app.session.playFirst === 'pair'">in Figure 1</span> before. But next to the main panel
there are also other panels that we will explain as we go along in the
instructions.
</p>
<p style="display: flex; flex-direction: column; align-items: center">
<img style='width: 100%;' :src="'/13victor/' + app.fig2Src">
<span>Figure 2: The decision screen for joint decision making</span>
</p>
</div>
<div v-if="player.instructionsPage == 2" style="flex: 0 0 1px; background-color: #CCC; margin: 0px 25px;"></div>
<div v-if="player.instructionsPage == 2" style="flex: 1 1 100px; max-width: 700px;">
<p v-if="app.session.playFirst === 'pair'">If decisions were to be made individually instead of jointly,
</p>
<p v-if="app.session.playFirst === 'individual'">When decisions were made individually instead of jointly,
</p>
<ul>
<li>lines for you were selected according to the following rules: Each
decision round started by having the computer select a line randomly from
the set of lines that intersect with at least one of the axes at {{ 50*player.ei }} or
more tokens but with no intercept exceeding {{ 100*player.ei }} tokens.
</li>

<li>lines for the other were selected according to the following rules:
Each decision round started by having the computer select a line randomly
from the set of lines that intersect with at least one of the axes at {{ 50*player.ej }}
or more tokens but with no intercept exceeding {{ 100*player.ej }} tokens.
</li>
</ul>
<p>For the joint decision making between you and the other, the above rules will be combined
as follows:</p>
<ul>
<li>Each decision round will start by having the computer select a line
randomly from the set of lines that intersect with at least one of the axes
at {{ 50*app.session.m }} or more tokens but with no intercept exceeding {{ 100*app.session.m }} tokens. (The
selected lines will not depend on your choices in any of the earlier
decision problems.)
</li>
</ul>
<p v-if="app.color === 'magenta'">
So the individual maximal number of tokens that you contribute to the joint
maximal number of tokens available to allocate jointly to an account in any
of the decision rounds is {{ 100 * player.ei }}.
</p>
<p v-if="app.color === 'yellow'">
So the individual maximal number of tokens that you contribute to the joint
maximal number of tokens available to allocate jointly to an account in any
of the decision rounds is {{ 100 * player.ei }}.
</p>
<p v-if="app.color === 'magenta'">
And the individual maximal number of tokens that the other contributes to
the joint maximal number of tokens available to allocate jointly to an
account in any of the decision rounds is {{ 100 * player.ej }}.
</p>
<p v-if="app.color === 'yellow'">
And the individual maximal number of tokens that the other contributes to
the joint maximal number of tokens available to allocate jointly to an
account in any of the decision rounds is {{ 100 * player.ej }}.
</p>
<p>
In each decision round, you and the other must decide jointly which choice
to make and the payoff of both of you will depend on this choice. This will
be done in two steps:
</p>
<b>Step 1:</b>
<br />
<p>
You and the other first individually and independently make <span v-if="app.color === 'yellow'">three decisions</span>:
</p>
<ul>
<li>
A decision on <b>token allocation</b>: You and the other
individually and independently make a token allocation choice on the line
that is shown on the decision screen. Note that in each decision round you
and the other see exactly the same line from which to choose on your screens.
<ul><li>
Once you have made this independent decision, it will also be shown in
the panel in the upper right hand corner in your decision screen labeled
<q>My allocation proposal</q>.
</li></ul>
</li>
<li v-if="app.color !== 'yellow'">
Once both of you have made your independent decisions, the other's independent token allocation decision will be shown in blue on the line in the main panel and in the panel labeled <q>Other's allocation
proposal</q> on the right of your decision screen (see Figure 3);
</li>
<li v-if="app.color === 'yellow'">
Two decisions on <b>token divisions</b>: You and the other
individually and independently make a proposal on how to divide between
yourself and the other the number of tokens you propose to allocate to the X
account, and a proposal on how to divide between yourself and the other the
number of tokens you propose to allocate to the Y account. These two
decisions will be made in the panel labeled <q>Token
Division</q>> on the right hand side of the decision screen.
To do so, move the sliders below the labels <q>My share of
tokens in account X</q> and <q>My share of
tokens in account Y</q> to the shares you want to propose.
The idea here is that these are the shares of tokens allocated to the X and
the Y account that you propose to get yourself in the event that the X or
the Y account is selected at the end of a round. The complementary shares
of (100 - your share of X) and (100 - your share of Y) are thus the
shares that you propose the other gets.
<ul>
<li>Once both of you have made your independent decisions, the other's independent token allocation decision will be shown in blue on the line in
the main panel and in the panel labeled <q>Other's allocation
proposal</q> on the right of your decision screen (see Figure 3);
</li>
<li>Once both of you have made these three independent decisions,
<ul><li>
the other's independent token allocation decision will be shown in blue on the line in
the main panel and in the panel labeled <q>Other's allocation
proposal</q> on the right of your decision screen (see Figure 3);
</li>
<li>
the other's independent token division decisions will be shown in blue
on the slider bars below the labels <q>My share of tokens in
account X/Y</q>. Note that the <q>Other's
division proposals</q> indicated on your screen are just the
numbers (100 - other's share of X) and (100 - other's share of Y), where
<q>other's share of X</q> and <q>other's share of Y</q> are the shares that the other proposes
to get him- or herself.
</li></ul>
</li></ul>
</li>
</ul>
<b>Step 2:</b>
<br />
<p>
As mentioned above, in each decision round you and the other must make a
joint decision. That is, the token allocations must match.
</p>
<p>
To facilitate coordination on the token allocation, once both you and the
other have made your independent decisions (step 1), a chat box will become
available at the bottom of the decision screen (see Figure 3). You will then be able to send messages back and forth to each other. Although we will record these messages, only you and the other but no other participant in
the room will see them.
</p>
</div>
  <div v-if="player.instructionsPage == 3" style="flex: 1 1 100px; max-width: 700px;">
<p>
Note, in sending messages back and forth between you and the other we
request you follow three simple rules: (1) Discussion must be in English. No
other language is allowed. (2) Be civil to each other, do not use bad
language, and do not make any threats to each other. (3) Do not identify
yourself, your seat number or anything that might reveal your identity. The
communication channel is intended for you to use to discuss and coordinate
your choice and should be used that way.
</p>
<p>
To send a message hit the enter key. Both your messages and the other's
messages will appear at the top of the chat box with the IDs
<q>Me</q> and <q>Other</q> in front.
</p>
<p style="display: flex; flex-direction: column; align-items: center">
<img style='width: 100%;' :src="'/13victor/' + app.fig3Src">
<span>Figure 3: The decision screen for joint decision making with chat</span>
</p>
  </div>
  <div v-if="player.instructionsPage == 2" style="flex: 0 0 1px; background-color: #CCC; margin: 0px 25px;"></div>
  <div v-if="player.instructionsPage == 2" style="flex: 1 1 100px; max-width: 700px;">
<ul>
<li>
If the token allocation proposals you and the other made match, the
<q>Status</q> line on top of the main panel
will read in green letters <q>Allocation proposals DO
match</q> <span v-if="app.color === 'yellow'">and <q>Division proposals DO match}</q></span>. This indicates to you and the other that there is agreement on the token allocation <span v-if="app.color === 'yellow'"><b>and</b> the
token divisions</span>. Then, the current decision screen will
disappear and a new round will start.
</li>
<li>
If the token allocation proposals you and the other made do not match,
the <q>Status</q> line on top of the main
panel will read in red letters <q>Allocation proposals DO NOT
match</q>.<span v-if="app.color === 'yellow'">If the token divisions you and the other made do
not match, the <q>Status</q> line will read in
red letters <q>Division proposals DO NOT
match</q></span>. This indicates to you and the other that there is
still disagreement on the token allocation<span v-if="app.color === 'yellow'"><b>or</b> either of the token
divisions or both</span>. You can change your token allocation proposal in the main panel by moving the mouse along the line to a new allocation that you want to propose <span v-if="app.color === 'yellow'">or change either of the token division proposals in the panel labeled <q>Token Division</q> by moving a
slider to a new division proposal that you want to propose</span>. A new confirmed proposal
regarding the token allocation <span v-if="app.color === 'yellow'">or either of the token divisions</span> will immediately also appear on the screen of
the other (and the other way around). You and the other can also continue to
use the chat box to reach agreement.
</li>
</ul>
<p>
<span v-if="app.session.playFirst === 'individual'">As in Part A</span>
<span v-if="app.session.playFirst === 'pair'">Recall from the introduction that</span>, 
at the end of a round, account X will be selected with a 1 out of {{ 1 / app.session.probSelX }} 
chance and account Y will be selected with 1 out of {{ 1 / (1 - app.session.probSelX) }} chance. <b>Each
of you will only receive the number of tokens you allocated to the account that was selected. The 
tokens you allocated to the other account will be lost.</b>
</p>
<p v-if="app.session.color === 'magenta'">Note that the fact that each of you gets the number of tokens allocated to the selected account (either X or Y) means that each of you gets {{ player.di * 100 }}% of the number of tokens allocated
to the selected account (either X or Y) and the other gets {{ player.dj * 100 }}%. This is indicated in the panel on the right in the
decision screen labeled <q>Token Division</q>.</p>
<p>The process described above will be repeated until all {{ app.session.numRounds + app.session.numAddRounds }} rounds
are completed.</p>
<p>Your earnings in this part of the experiment are determined as follows: At the end of
the entire experiment, the computer will randomly select one of the rounds 1 to {{ app.session.numRounds + app.session.numAddRounds }} of this part of the experiment. The round selected only depends
on chance, and each of the rounds 1 to {{ app.session.numRounds + app.session.numAddRounds }} is equally likely to be
selected. At the end of the entire experiment, you will be informed about (a) which round
of this part was chosen for payment, (b) your choice in this round, (c) the account that
was drawn in the selected payment round, and (d) your payment in tokens. The tokens you
earned in this part of the experiment will be converted into euros. For each 
{{ app.session.exchangeRateIndiv }} tokens earned in this part of the experiment you will receive 1 euro.</p>
<p>Note that during the experiment, you will not be informed about which account was selected
after a round. You will only learn at the end of the experiment which account was selected
for the round that was selected for payment.</p>
<p>Before the {{ app.session.numRounds + app.session.numAddRounds }} rounds of Part 
{{participant.numDecParts === 1 ? 'A' : 'B'}} will start, there will be {{ app.session.numPracticeRounds }}
practice rounds that will not be relevant for actual payment.</p>
  </div>
            </div>
            <div v-if="app.treatment === 'individual'" class="card-body" style="display: flex">
<div v-if="player.instructionsPage == 1" style="flex: 1 1 100px; max-width: 700px;">
  <div style="max-width: 700px">
    <h4>General Instructions</h4>
    <p>Welcome to this experiment! Please remain silent during the experiment and
    do not speak to other participants. If you have a question or need
    assistance of any kind, please raise your hand and a member of our staff
    will come to you.</p>
    
    <p>In the experiment, you will be asked to make a series of decisions. If you
    follow the instructions carefully, you can earn a considerable amount of
    money, which will be paid to you in cash at the end of the experiment.</p>
    
    <p>The experiment will consist of two parts, called Part A and Part B, three
    additional tasks and a short questionnaire. We will concentrate on one part
    or task at a time and explain the next part or task only after the previous
    part or task has been completed.</p>
    
    <p>During the experiment we will speak in terms of experimental tokens instead
    of euros. Your earnings will be calculated in terms of tokens and then
    translated into euros at the end of the experiment. During the experiment,
    we will indicate how tokens earned in a part or task will be converted into
    euros at the end of the experiment.</p>
  </div>
</div>
<div v-if="player.instructionsPage == 2" style="flex: 1 1 100px; display: flex">
   <div style="flex: 1 1 100px; max-width: 700px;">
<h4>A decision problem: token allocation</h4>
<p>This section describes the basic decision making problem (which is called <b>token allocation</b>)
and the decision screen that you will use to make your decisions in several rounds.
</p>
<p>In each decision round, you will be asked to allocate tokens between two
accounts, labeled X and Y. The X account corresponds to the <i>x</i>-axis (the
horizontal axis) and the Y account corresponds to the <i>y</i>-axis (the vertical
axis) on a two-dimensional graph. Each choice will involve choosing a point
on a line representing possible token allocations.
</p>
<p>In each choice, you may choose any X and Y pair that is on the line. For
example, as illustrated in Figure 1, the selected choice represents a
decision to allocate {{ app.exXAmount }} tokens to the X account and {{ app.exYAmount }} tokens to the
Y account. You may also choose to allocate all tokens to either the X or the
Y account. (Note that the allocation shown in Figure 1 was selected randomly
and does not represent a <q>good</q> or <q>bad</q> decision.)
</p>
<p>Each decision round will start by having the computer select such a line
randomly from the set of lines that intersect with at least one of the axes
at <i>A</i>/2 or more tokens but with no intercept exceeding <i>A</i> tokens. (For
instance, <i>A</i> could have the value of {{ app.ei }}, implying that each randomly
selected line intersects with at least one of the axes at {{ app.ei/2 }} or more
tokens but intersects with none of the axes at more than {{ app.ei }}, tokens.)
</p>
<p>The number <i>A</i> can be interpreted as the maximal number of tokens that you
may have available to allocate to an account in any of the decision rounds.
Hence, the larger is <i>A</i>, the larger the maximal number of tokens that you
may be able to allocate to an account.
</p>
<p>When the experiment starts, you will be informed about the value of <i>A</i> that
applies to you.
</p>
<p>
To choose a token allocation, use the mouse to move the pointer on the
computer screen along the line to the allocation that you wish to choose.
The computer will only allow you to choose combinations of X and Y that are
on the line. When you are ready to make your decision, left-click to enter
your chosen allocation. After that, confirm your decision by clicking on the
Yes button. If you want to revise your decision, click on the No button.
Once you have confirmed your decision, it cannot be revised anymore and the
next decision round will start automatically.
</p>
    </div>
    <div style="flex: 0 0 1px; background-color: #CCC; margin: 0px 25px;"></div>
    <div style="flex: 1 1 100px; max-width: 700px;">
<p style="display: flex; flex-direction: column; align-items: center">
<img style='width: 700px;' :src="'/13victor/' + app.fig1Src">
<span>Figure 1: The decision screen for the token allocation</span>
</p>

<p>
Your payoff in each decision round is determined by the number of tokens you
allocated to the X account or the number of tokens you allocated to the Y
account as follows: At the end of the round, the computer will <b>
randomly</b> select one of the accounts, X or Y. Account X will be selected
with a 1 out of {{ 1 / app.session.probSelX }} chance and account Y will be selected 
with a 1 out of {{ 1 / (1 - app.session.probSelX) }}. <b>You will only receive the number of tokens you
allocated to the account that was selected. The tokens you allocated to the
other account will be lost.</b> 
</p>

<p>This process will be repeated until all rounds are completed.</p>
    </div>
</div>
<div v-if="player.instructionsPage == 3" style="flex: 1 1 100px; display: flex">
  <div style="flex: 1 1 100px; max-width: 700px;">
<h4>Instructions for Part {{participant.numDecParts === 1 ? 'A' : 'B'}}</h4>
<p>
This Part of the experiment will consist of {{ app.session.numRounds + app.session.numAddRounds }} decision rounds.
</p>
<p v-if="app.session.playFirst === 'individual'">
Recall that in each round, you will be asked to allocate tokens between two accounts, labeled
X and Y. Each choice will involve choosing a point on a line representing possible token
allocations.
</p>
<p v-if="app.session.playFirst === 'pair'">
But instead of doing so jointly with another participant as in Part A, you
will now do so individually.
</p>
<p v-if="app.session.playFirst === 'pair'">
The decision screen that you will use to make your decisions in this part
looks like the one in Figure 1. It just consists of the main panel that you
saw in Part A as all panels that had to do with joint decision making are
not needed anymore. Below we display Figure 1 again.
</p>

<p>
Each decision round will start by having the computer select a line randomly
from the set of lines that intersect with at least one of the axes at {{ 50*player.ei }} 
or more tokens but with no intercept exceeding {{ 100*player.ei }} tokens. (The selected
lines will not depend on your choices in any of the earlier decision problems.)
</p>

<p v-if="app.session.playFirst === 'pair'">
As in Part A, at the end of a round account X will be selected with a 1 out of {{ 1 / app.session.probSelX }}
chance and account Y will be selected with 1 out of {{ 1 / (1 - app.session.probSelX) }}
chance. <b>You will only receive the number of tokens you allocated to the account that was selected. The tokens you allocated to the other account will be lost</b>.
</p>

<p v-if="app.session.playFirst === 'individual'">
Your payoff in each decision round will be determined as described above.
</p>

<h4>Earnings in Part {{participant.numDecParts === 1 ? 'A' : 'B'}}</h4>

<p>
Your earnings in this part of the experiment are determined as follows: At
the end of the entire experiment, the computer will randomly select one of
the rounds 1 to {{ app.session.numRounds + app.session.numAddRounds }} of this part of the experiment. The round selected
only depends on chance, and each of the rounds 1 to {{ app.session.numRounds + app.session.numAddRounds }} is equally likely to be selected. At the end of the entire experiment, you will be informed about (a) which round of this part was chosen for payment, (b) your choice in this round, (c) the account that was drawn in the selected payment
round, and (d) your payment in tokens. The tokens you earned in this part of the experiment will be converted into euros. For each {{ app.session.exchangeRateIndiv }} tokens earned in this part of the experiment you will receive 1 euro.
</p>

<p>
Note that during the experiment, you will not be informed about which account was selected after a round. You will only learn at the end of the experiment which account was selected for the round that was selected for payment.
</p>
<p>
Before the {{ app.session.numRounds + app.session.numAddRounds }} rounds of {{participant.numDecParts === 1 ? 'A' : 'B'}} will start, there will be {{ app.session.numPracticeRounds }} practice rounds that will not be relevant for actual payment.
</p>
  </div>
  <div style="flex: 0 0 1px; background-color: #CCC; margin: 0px 25px;">
  </div>
  <div style="flex: 1 1 100px; max-width: 700px;">
<div v-if="app.session.playFirst === 'individual'" style="display: flex; flex-direction: column; align-items: center">
  <img style='width: 100%;' :src="'/13victor/' + app.fig1Src">
  <span>Figure 1: The decision screen for the token allocation</span>
</div>
<div v-if="app.session.playFirst === 'pair'" style="display: flex; flex-direction: column; align-items: center">
  <img style='width: 100%;' :src="'/13victor/' + app.fig1Src">
  <span>Figure 1: The decision screen for the token allocation</span>
</div>
  </div>
</div>
            </div>
            <div v-if="app.treatment === 'pair'" style="margin-top: 1rem; margin-bottom: 1rem; align-self: center">
<button v-if="player.instructionsPage > 1" @click="jt.vue.player.instructionsPage--">Back</button>
<button v-if="player.instructionsPage < 4" @click="jt.vue.player.instructionsPage++">Continue</button>
<button v-if="player.instructionsPage >= 4" onclick="jt.setPlayerPage('game')">Continue</button>
            </div>
            <div v-if="app.treatment === 'individual'" style="margin-top: 1rem; margin-bottom: 1rem; align-self: center">
<button v-if="player.instructionsPage > 1" @click="jt.vue.player.instructionsPage--">Back</button>
<button v-if="player.instructionsPage < 3" @click="jt.vue.player.instructionsPage++">Continue</button>
<button v-if="player.instructionsPage >= 3" onclick="jt.setPlayerPage('game')">Continue</button>
            </div>
          </div>
        </div>
        <div v-show="player.page === 'game'">
          <span v-show='player.status=="playing"'>
            {{stages}}
          </span>
          <span v-show='["ready", "waiting", "finished", "done"].includes(player.status)'>
            {{waiting-screens}}
          </span>
        </div>
      </div>
      {{scripts}}
    </body>
</html>
`;

if (app.treatment === 'pair') {
  app.getGroupIdsForPeriod = function (period) {
    let ids = app.text === 'training' ? app.session.matchTraining : app.session.matchReal
    console.log('got group ids', ids)
    return ids
  }
}

app.drawMatching = function () {
  
  if (app.session.match == null) {
    const pIds = Object.keys(app.session.participants)
    let match = {}
    let matchTraining = []
    let matchReal = []
    for (let p in pIds) {
      match[pIds[p]] = {} 
    }
    const pIds1 = Utils.shuffle(pIds) // training partners
    for (let i = 0; i < pIds.length; i++) {
      let p1 = pIds1[i]
      let p2 = pIds1[i + 1]
      i++
      match[p1].trainingPartner = p2
      match[p1].isTrainingP1 = true
      match[p2].trainingPartner = p1
      match[p2].isTrainingP1 = false
      matchTraining.push([p1, p2])
    }
    let valid = false
    while (!valid) {
      valid = true
      matchReal = [];
      let pIds2 = Utils.shuffle(pIds) // real partners
      for (let i = 0; i < pIds2.length; i++) {
        let p1 = pIds2[i]
        let p2 = pIds2[i + 1]
        i++
        match[p1].realPartner = p2
        match[p1].isRealP1 = true
        match[p2].realPartner = p1
        match[p2].isRealP1 = false
        matchReal.push([p1, p2])
      }
      for (let i in match) {
        if (match[i].trainingPartner === match[i].realPartner) {
          valid = false
          break
        }
      }
    }
    if (app.session != null) {
      app.session.matchTraining = matchTraining
      app.session.matchReal = matchReal
    }
    // console.log('match', match)
    app.session.match = match
    for (let i in app.session.participants) {
      let p = app.session.participants[i]
      // console.log('player', i, p.id, match[i], p.budgets)
      p.isRealP1 = match[i].isRealP1
      p.isTrainingP1 = match[i].isTrainingP1
      let partner = app.session.participants[match[i].realPartner]
      if (partner.budgets != null) {
        p.budgets = partner.budgets
        p.shuffledBudgets = partner.shuffledBudgets
      } else {
        p.budgets = []
        for (let j = 0; j < app.session.numRounds + app.session.numAddRounds; j++) {
          p.budgets.push(drawBudget(100))
        }
        p.shuffledBudgets = Utils.shuffle([...p.budgets])
      }
      // console.log('budgets', p.budgets, p.shuffledBudgets)
    }
  }
}

app.participantStart = function (participant) {
  if (app.session.matchingReal == null) {
    app.drawMatching();
  }

  if (app.text !== 'training') return
  if (participant.numDecParts == null) {
      participant.numDecParts = 0;
  }
  participant.numDecParts++;
}

let decisionStage = app.newStage('decide');
decisionStage.wrapPlayingScreenInFormTag = false;
decisionStage.addOKButtonIfNone = false;
decisionStage.groupStart = function (group) {
  group.addTable('messages');
  group.addTable('allocationProposals');
  group.addTable('divisionProposals');
  let part1 = group.players[0].participant;
  if (app.text === 'training') {
    group.budget = drawBudget(100)
  } else {
    if (part1.numDecParts === 1) {
      group.budget = part1.budgets[group.period.id - 1]
    } else {
      group.budget = part1.shuffledBudgets[group.period.id - 1]
    }
  }
  group.budget.type = group.period.id <= app.numRegularBudgets ? 'regular' : 'additional';
  group.budgetX = group.budget.maxX;
  group.budgetY = group.budget.maxY;
  if (app.treatment === 'pair') {
    group.maxX = group.budgetX * app.session.m;
    group.maxY = group.budgetY * app.session.m;
  } else {
    group.maxX = group.budgetX;
    group.maxY = group.budgetY;
    }
    group.validProposals = false;

    for (let p in group.players) {
        let x, y = '';
        let player = group.players[p];
        if (group.session().divisionType === 'EXOG') {
            let d = group.session().d1;
            if (player.idInGroup === 2) {
                d = group.session().d2;
            }
            x = d * 100;
            y = d * 100;
        } else {
            x = '';
            y = '';
        }
        player.myDivisionProposal = {
            x,
            y,
        }
        player.initialDivisionProposal = { x, y };
        player.numDivisionProposals = 0;
    }

    if (group.app().treatment === 'pair') {
        let p1 = group.players[0];
        let p2 = group.players[1];
        p1.partnerDivisionProposal = p2.myDivisionProposal;
        p2.partnerDivisionProposal = p1.myDivisionProposal;
        p1.participant.partnerId = p2.participant.id;
        p2.participant.partnerId = p1.participant.id;
    }
}

decisionStage.playerStart = function (player) {
  player.instructionsPage = 3;
  if (player.group.period.id == 1 && app.text === 'training') {
    player.page = 'instructions'
  } else {
    player.page = 'game'
  }
    player.toolTipX = -1;
    player.toolTipY = -1;
    player.madeAllocationSelection = false;
    player.newDivisionLetter = -1;
    player.newDivisionValue = -1;
    player.initialCircle = true;
    player.showRhombus = false;
    player.hoverDivisionX = -1;
    player.hoverDivisionY = -1;
    if (app.treatment === 'pair') {
        player.partnerAllocationProposal = { x: '', y: '' };
        player.allocationMultiplier = 1;
    } else {
        if (player.participant.isRealP1) {
            player.allocationMultiplier = app.session.e1;
        } else {
            player.allocationMultiplier = app.session.e2;
        }
    }
    if (player.participant.isRealP1) {
      player.ei = app.session.e1
      player.ej = app.session.e2
      player.di = app.session.d1
      player.dj = app.session.d2
    } else {
      player.ei = app.session.e2
      player.ej = app.session.e1
      player.di = app.session.d2
      player.dj = app.session.d1
    }
    player.maxX = player.group.maxX * player.allocationMultiplier;
    player.maxY = player.group.maxY * player.allocationMultiplier;

    let randX = Math.random() * player.maxX;
    let randY = (1 - randX / player.maxX) * player.maxY;
    player.myAllocationProposal = { x: randX, y: randY };
    player.initialAllocationProposal = { x : randX, y: randY };
    player.numAllocationProposals = 0;
    player.allocationProposals = [];
    player.numDivisionProposals = 0;
    player.divisionProposals = [];
}

decisionStage.activeScreen = /*html*/`
<div class="modal" id="confirmAllocationModal" tabindex="-1" role="dialog" style='margin-top: 30vh'>
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <div>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <p style='padding-top: 30px;'>Your chosen allocation is X={{player.toolTipX}} and Y={{player.toolTipY}}.</p>
        <p>Do you want to confirm this allocation?</p>
      </div>
      <div class="modal-footer" style='justify-content: left'>
        <button type="button" class="btn btn-primary" data-dismiss="modal" onclick='jt.sendAllocationProposal()'>Yes</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
      </div>
    </div>
  </div>
</div>
<div class="modal" id="confirmDivisionModal" tabindex="-1" role="dialog" style='margin-top: 30vh'>
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <div>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <p style='padding-top: 30px;'>Your chosen division is {{player.newDivisionLetter}}={{player.newDivisionValue}}%.</p>
        <p>Do you want to confirm this division?</p>
      </div>
      <div class="modal-footer" style='justify-content: left'>
        <button type="button" class="btn btn-primary" data-dismiss="modal" onclick='setMyDivisionProposal()'>Yes</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick='cancelDivisionProposal()'>No</button>
      </div>
    </div>
  </div>
</div>
<div class="modal" id="informMatchModal" tabindex="-1" role="dialog" style='margin-top: 30vh'>
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <p style='padding-top: 30px;'>Your allocation {{app.treatment === 'pair' && app.session.divisionType === "ENDO" ? ' and division' : ''}} proposals match. A new round will start.</p>
      </div>
      <div class="modal-footer" style='justify-content: left'>
        <button type="button" class="btn btn-primary" data-dismiss="modal" onclick='confirmNewRound()'>OK</button>
      </div>
    </div>
  </div>
</div>
<div style='display: flex; flex-direction: column;'>
  <div :style='"display: flex; flex-direction: row; width: 1180px; justify-content: center;"'>
        <div class="card" :style='app.treatment === "pair" ? "flex: 1 1 auto" : ""'>
            <div class="card-body">
                <div style='display: flex; height: 72px;'>
                    <div style='margin-right: 10px;'>
                        <div style='padding-bottom: 5px'><span style='font-weight: bold; font-size: 1.5rem'>Token Allocation</span> - {{app.text == 'training' ? 'Practice' : (participant.numDecParts === 1 ? 'Part A' : 'Part B')}}: Round {{period.id}} of {{app.numPeriods}}</div>
                        <h5 style='padding-bottom: 5px; font-size: inherit'>Please choose your preferred allocation{{app.treatment === 'pair' && app.session.divisionType === "ENDO" ? ' and division' : ''}}!</h5>
                    </div> 
                    <div
                        v-if='
                            app.treatment === "pair" 
                        '
                        style='flex: 0 0 auto; padding-left: 20px;'
                    >
                        <b>Status</b>
                        <div v-if='
                            player.myAllocationProposal.x === player.partnerAllocationProposal.x && 
                            player.myAllocationProposal.y === player.partnerAllocationProposal.y'
                        class="text-success">
                            Allocation proposals DO match.
                        </div>
                        <div v-else class="text-danger">
                            Allocation proposals DO NOT match.
                        </div>
                        <div v-if='app.session.divisionType === "ENDO"'>
                            <div v-if='
                            player.myDivisionProposal.x !== "" &&
                            player.myDivisionProposal.x === 100 - player.partnerDivisionProposal.x && 
                            player.myDivisionProposal.y === 100 - player.partnerDivisionProposal.y'
                            class="text-success">
                            Division proposals DO match.
                            </div>
                            <div v-else class="text-danger">
                            Division proposals DO NOT match.
                            </div>
                        </div>
                    </div>
                </div>
                <div id="containerBargain" style='width: 600px; height: 600px' onclick='confirmAllocationSelection()' onmouseenter='showRhombus()' onmouseleave='hideRhombus()'></div>
                <div 
                    id='text' 
                    style='position: absolute; background-color: rgba(255, 255, 255, 0.9); border: 3px solid #000; border-radius: 5px; padding: 2px 5px; pointer-events: none;'
                    v-show='player.showRhombus && player.toolTipX !== "" && player.toolTipX > -1'
                    onclick='confirmAllocationSelection()'
                    onmousemove='draw_plot_lines(jt.toolTipX)'
                >
                    X = <b id='allocationProposalX'></b>, Y = <b id='allocationProposalY'></b>
                </div>
                <div
                    id='circle'
                    style='background-color: black; pointer-events: none; height: 10px; border-radius: 5px; width: 10px; position: absolute;'
                    v-show='player.toolTipX !== "" && player.toolTipX > -1'
                    onclick='confirmAllocationSelection()' 
                    onmousemove='draw_plot_lines(jt.toolTipX)'
                ></div>
            </div>
            <div style='display: flex; width: 100%; justify-content: center; margin-bottom: 1rem;'>
                <button onclick="jt.vue.player.page = 'instructions'; jt.vue.player.instructionsPage = jt.vue.app.treatment === 'pair' ? 4 : 3;">Show instructions</button>
            </div>
        </div>
        <div style='display: flex; flex-direction: column; flex: 0 0 360px;' v-if="app.treatment === 'pair'">
            <div class="card" style='flex: 1 1 auto;'>
                <div class='blocker' v-show='(app.session.divisionType === "EXOG" || player.myDivisionProposal.x !== "" && player.myDivisionProposal.x === 100 - player.partnerDivisionProposal.x && player.myDivisionProposal.y !== "" && player.myDivisionProposal.y === 100 - player.partnerDivisionProposal.y) && player.madeAllocationSelection && player.myAllocationProposal.x === player.partnerAllocationProposal.x'></div>
                <div class="card-body">
                    <h5 class="card-title">My allocation proposal</h5>
                    <div class='proposalDiv' v-if='!player.initialCircle && player.myAllocationProposal.x !== ""'>
                        X: {{player.myAllocationProposal.x | round(1)}}<br>
                        Y: {{player.myAllocationProposal.y | round(1)}}<br>
                    </div>
                    <div class='proposalDiv' v-else>None yet.</div>
                </div>
            </div>
            <div class="card" style='flex: 1 1 auto;'>
                <div class='blocker' v-show='(app.session.divisionType === "EXOG" || player.myDivisionProposal.x !== "" && player.myDivisionProposal.x === 100 - player.partnerDivisionProposal.x && player.myDivisionProposal.y !== "" && player.myDivisionProposal.y === 100 - player.partnerDivisionProposal.y) && player.madeAllocationSelection && player.myAllocationProposal.x === player.partnerAllocationProposal.x'></div>
                <div class="card-body" style='color: blue'>
                    <h5 class="card-title">Other's allocation proposal</h5>
                    <div class='proposalDiv' v-if='player.madeAllocationSelection && player.partnerAllocationProposal.x !== "" && (app.session.divisionType != "ENDO" || (player.myDivisionProposal.x !== "" && player.myDivisionProposal.y !== "" && player.partnerDivisionProposal.x !== "" && player.partnerDivisionProposal.y !== ""))'>
                        X: {{player.partnerAllocationProposal.x}}<br>
                        Y: {{player.partnerAllocationProposal.y}}<br>
                    </div>
                    <div class='proposalDiv' v-else>None yet.</div>
                </div>
            </div>
            <div class="card" v-if='app.session.divisionType === "EXOG"' style='flex: 1 1 auto;'>
                <div class='blocker'></div>
                <div class="card-body">
                    <h5 class="card-title">Division</h5>
                    <div>My share of the eventually agreed X: <b>{{player.myDivisionProposal.x}}%</b></div>
                    <div>My share of the eventually agreed Y: <b>{{player.myDivisionProposal.y}}%</b></div>
                </div>
            </div>
            <div class="card" v-if='app.session.divisionType === "ENDO"' style='flex: 1 1 auto;'>
                <div class='blocker' v-show='(app.session.divisionType === "EXOG" || player.myDivisionProposal.x !== "" && player.myDivisionProposal.x === 100 - player.partnerDivisionProposal.x && player.myDivisionProposal.y !== "" && player.myDivisionProposal.y === 100 - player.partnerDivisionProposal.y) && player.madeAllocationSelection && player.myAllocationProposal.x === player.partnerAllocationProposal.x'></div>
                <div class="card-body">
                    <h5 class="card-title">Token division</h5>
                    <div style='height: 120px;'>
                        <div>My share of the eventually agreed X: <b>{{(player.myDivisionProposal == null || player.myDivisionProposal.x === '') ? '' : (player.myDivisionProposal.x + "%")}}</b></div>
                        <div style='display: flex; margin-top: 30px; margin-bottom: 20px;'>
                            <span style='flex: 0 0 auto'>0%</span>
                            <div class='rangeWrapper'>
                                <span v-show='player.partnerDivisionProposal.x !== "" && player.partnerDivisionProposal.y !== "" && player.myDivisionProposal.x !== "" && player.myDivisionProposal.y !== ""' id='partnerDivisionXBar' class='divisionBar'></span>
                                <span v-show='player.partnerDivisionProposal.x !== "" && player.partnerDivisionProposal.y !== "" && player.myDivisionProposal.x !== "" && player.myDivisionProposal.y !== ""' id='partnerDivisionXText' class='divisionText'></span>
                                <span v-show='player.hoverDivisionX > -1' id='hoverDivisionXBar' class='divisionBar divisionHoverBar'></span>
                                <span v-show='player.hoverDivisionX > -1' id='hoverDivisionXText' class='divisionHoverText'></span>
                                <input class='rangeBottom' id="myDivisionX" value='0' type="range" min="0" max="100" step="1"> 
                                <input class='rangeTop' id="myDivisionX2" value='0' type="range" min="0" max="100" step="1" onmouseleave="mouseLeave('X')" onmousemove="mouseMove(event, 'X')" onchange="confirmDivisionSelection(event)"> 
                            </div>
                            <span style='flex: 0 0 auto'>100%</span>
                        </div>
                    </div>
                    <div style='height: 120px;'>
                        <div>My share of the eventually agreed Y: <b>{{(player.myDivisionProposal == null || player.myDivisionProposal.y === '') ? '' : (player.myDivisionProposal.y + "%")}}</b></div>
                        <div style='display: flex; margin-top: 30px; margin-bottom: 20px;'>
                            <span style='flex: 0 0 auto'>0%</span>
                            <div class='rangeWrapper'>
                                <span v-show='player.partnerDivisionProposal.x !== "" && player.partnerDivisionProposal.y !== "" && player.myDivisionProposal.x !== "" && player.myDivisionProposal.y !== ""' id='partnerDivisionYBar' class='divisionBar'></span>
                                <span v-show='player.partnerDivisionProposal.x !== "" && player.partnerDivisionProposal.y !== "" && player.myDivisionProposal.x !== "" && player.myDivisionProposal.y !== ""' id='partnerDivisionYText' class='divisionText'></span>
                                <span v-show='player.hoverDivisionY > -1' id='hoverDivisionYBar' class='divisionBar divisionHoverBar'></span>
                                <span v-show='player.hoverDivisionY > -1' id='hoverDivisionYText' class='divisionHoverText'></span>
                                <input class='rangeBottom' id="myDivisionY" value='0' type="range" min="0" max="100" step="1"> 
                                <input class='rangeTop' id="myDivisionY2" value='0' type="range" min="0" max="100" step="1" onmouseleave="mouseLeave('Y')" onmousemove="mouseMove(event, 'Y')" onchange="confirmDivisionSelection(event)">
                            </div>
                            <span style='flex: 0 0 auto'>100%</span>
                        </div>
                    </div>
                    <div style='display: flex'>
                        <span style='height: 20px; margin-top: 3px; margin-right: 8px; width: 2px; background-color: black'></span>
                        <span style='color: black'>My division proposal</span>
                    </div>
                    <div style='display: flex'>
                        <span style='height: 20px; margin-top: 3px; margin-right: 8px; width: 2px; background-color: blue'></span>
                        <span style='color: blue'>Other's division proposal</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="card" v-if="app.treatment === 'pair'">
        <div class='blocker' v-show='!player.madeAllocationSelection || player.partnerAllocationProposal.x === "" || (app.session.divisionType == "ENDO" && (player.myDivisionProposal.x === "" || player.myDivisionProposal.y === "" || player.partnerDivisionProposal.x === "" || player.partnerDivisionProposal.y === ""))'></div>
        <div class="card-body">
            <h5 class="card-title">Chat</h5>
            <div style='display: flex;'>
                <input style='flex: 1 1 auto' type='text' id='chatMessageInput' autocomplete="off" onkeyup='keyUp(event)' placeholder='Enter message here...'>
                <button type='button' onclick='sendChatMessageToServer()'>Send message</button>
            </div>
            <div style='overflow-y: scroll; height: 100px; width: 100%; border: 2px solid #888; padding: 5px; margin-top: 5px;'>
                <div v-for='message in group.messages.slice().reverse()' :key='message.id' v-bind:style="message.player == player.id ? {color: 'black'} : {color: 'blue'}">
                    <span v-if='message.player == player.id'><b>ME:</b></span>
                    <span v-else><b>OTHER:</b></span>
                    {{ message.content }}
                </div>
            </div>
        </div>
    </div>
</div>
    `

app.messages.endBargaining = function () {
    let player = this.participant.player;
    player.endStage(false);
    for (let i in player.group.players) {
        if (player.group.players[i].status === 'playing') {
            return;
        }
    }
    player.group.forceEndStage(player.stage);
}

app.messages.sendMessage = function (content) {
    let player = this.participant.player;
    let group = player.group;
    let timePosted = player.timeInStage();
    let message = {
        content,
        player: player.id,
        timePosted,
    };
    group.messages.new(message); // Notifies group's players about new message.
    for (let p in group.players) {
        group.players[p].saveAndUpdate();
    }
}

app.messages.setMyAllocationProposal = function (proposal) {
    // 'this' is the client sending the proposal.
    let player = this.participant.player;
    let group = player.group;

    let timePosted = player.timeInStage();
    let message = {
        x: proposal.x,
        y: proposal.y,
        player: player.id,
        timePosted,
    };
    group.allocationProposals.new(message);
    player.allocationProposals.push(message);
    player.numAllocationProposals++;
    player.madeAllocationSelection = true;
    player.myAllocationProposal = proposal;
    player.initialCircle = false;
    player.emit('setMyAllocationProposal', proposal);
    let partner = null;
    if (app.treatment === 'pair') {
        partner = group.playersExcept(player)[0];
        partner.partnerAllocationProposal = proposal;
        partner.emit('setPartnerAllocationProposal', proposal);
    }

    app.checkIfValid(group, player, partner, this);

}

app.checkIfValid = function (group, player, partner, client) {
    let valid = app.areProposalsValid(group);
    if (valid) {
        group.validProposals = true;
    }

    // Player exits decision stage after making proposal.
    if (app.treatment !== 'pair') {
        let end = app.messages.endBargaining.bind(client);
        end();
    }
    else {
        player.saveAndUpdate();
        partner.saveAndUpdate();
    }

}

app.messages.setMyDivisionProposal = function (proposal) {

    proposal = { x: proposal.X, y: proposal.Y };

    let player = this.participant.player;
    let group = player.group;

    let timePosted = player.timeInStage();
    let message = {
        x: proposal.x,
        y: proposal.y,
        player: player.id,
        timePosted,
    };
    group.divisionProposals.new(message);
    player.divisionProposals.push(message);
    player.numDivisionProposals++;

    if (proposal.x != null) {
        player.myDivisionProposal.x = proposal.x;
    }
    if (proposal.y != null) {
        player.myDivisionProposal.y = proposal.y;
    }
    // console.log('new proposal = ', proposal, player.myDivisionProposal);
    player.emit('setMyDivisionProposal', player.myDivisionProposal);
    let partner = group.playersExcept(player)[0];
    partner.partnerDivisionProposal = player.myDivisionProposal;
    partner.emit('setPartnerDivisionProposal', player.myDivisionProposal);

    app.checkIfValid(group, player, partner, this);

}

app.messages.setPlayerPage = function (page) {
  this.participant.player.page = page
}

decisionStage.playerEnd = function (player) {

    if (player.group.period.id == 1) {
        player.participant.allocationOutcomes = [];
        player.participant.divisionOutcomes = [];
    }
    player.participant.allocationOutcomes.push({ x: player.myAllocationProposal.x, y: player.myAllocationProposal.y });
    player.participant.divisionOutcomes.push({ x: player.myDivisionProposal.x, y: player.myDivisionProposal.y });

}

const transitionStage = app.newStage('transition');
transitionStage.canPlayerParticipate = function(player) {
  return app.text === 'training' && player.group.period.id == app.numPeriods;
}
transitionStage.activeScreen = `
<div style='display: flex; flex-direction: column;'>
  <div :style='"display: flex; flex-direction: row; width: 1180px; justify-content: center;"'>
    <div class="card" :style='app.treatment === "pair" ? "flex: 1 1 auto" : ""'>
      <div class="card-body">
<p v-if="app.text === 'training'">
You have completed the {{ app.numPeriods }} practice rounds.
Please click <q>Continue</q> to start this part of the experiment.
</p>
<p v-if="app.text === 'real' && participant.numDecParts === 1">
You have now finished Part A of the experiment. We now ask you to make decisions in Part B.
</p>
<button>Continue</button>
</div></div></div></div>
`

app.participantEnd = function (participant) {

    if (participant.chosenPayouts == null) {
        participant.chosenDecisions = [];
        participant.chosenPayouts = [];
        participant.chosenDivisions = [];
        participant.chosenAllocations = [];
        participant.chosenGoods = [];
        participant.chosenEuros = [];
    }

    let N = app.numPaidDecisions;

    if (N > app.numPeriods) {
        console.log('error: not enough paid periods');
        return;
    }

    let ints = [];
    for (let i = 0; i < app.numPeriods; i++) {
        ints.push(i);
    }
    Utils.shuffle(ints);
    ints = ints.splice(0, N);

    let chosenDecisions = [];
    let chosenGoods = [];
    let chosenPayouts = [];
    let chosenAllocations = [];
    let chosenDivisions = [];
    let chosenEuros = [];

    for (let i = 0; i < ints.length; i++) {
        let selectedGood = (Math.random() < app.session.probSelX) ? 'x' : 'y';
        let p = ints[i];
        chosenDecisions.push(p + 1);
        chosenGoods.push(selectedGood);
        let allocation = participant.allocationOutcomes[p];
        chosenAllocations.push(allocation);
        let division = participant.divisionOutcomes[p];
        let payout = allocation[selectedGood];
        if (division.x === '') {
            division = '-';
        } else {
            payout *= division[selectedGood] / 100;
        }
        chosenDivisions.push(division);
        chosenPayouts.push(payout);
        chosenEuros.push(payout / app.exRate);
    }
    participant.chosenDecisions.push(chosenDecisions);
    participant.chosenGoods.push(chosenGoods);
    participant.chosenPayouts.push(chosenPayouts);
    participant.chosenDivisions.push(chosenDivisions);
    participant.chosenAllocations.push(chosenAllocations);
    participant.chosenEuros.push(chosenEuros);

}



// Returns sum of all individual player proposals (for x and y), or false if not all players have made a proposal yet.
app.areProposalsValid = function (group) {

    if (group.players.length < 2) {
        return true;
    }

    let p1 = group.players[0];
    let p2 = group.players[1];

    if (group.app().treatment === 'individual') {
        return true;
    }

    let matchingAllocationProposals =
        p1.myAllocationProposal.x === p2.myAllocationProposal.x &&
        p1.myAllocationProposal.y === p2.myAllocationProposal.y;

    if (!matchingAllocationProposals) {
        return false;
    }

    let matchingDivisionProposals =
        group.app().session.divisionType === 'EXOG' ||
        (p1.myDivisionProposal.x === 100 - p2.myDivisionProposal.x &&
            p1.myDivisionProposal.y === 100 - p2.myDivisionProposal.y);

    if (!matchingDivisionProposals) {
        return false;
    }

    return true;

}

