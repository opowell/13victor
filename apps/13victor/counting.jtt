app.isStandaloneApp = false;

if (app.treatment === 'individual') {
    app.groupSize = 1;
}
if (app.treatment === 'pair') {
    app.groupSize = 2;
}

for (let i in app.regularBudgets) {
  app.regularBudgets[i].type = 'regular';
}
for (let i in app.addBudgets) {
  app.addBudgets[i].type = 'additional';
}
app.budgets = [...app.regularBudgets, ...app.addBudgets]

app.numPeriods = app.budgets.length;
app.groupMatchingType = 'PARTNER_RANDOM';
app.modifyPathsToIncludeId = false;
app.waitingScreen = /*html*/`
<div style='display: flex; flex-direction: column; margin: 5px;'>
    <div class="card">
        <div class="card-body">
            <h3>WAITING</h3>
            <p>The experiment will continue soon.</p>
        </div>
    </div>
</div>
`
app.insertJtreeRefAtStartOfClientHTML = false;

app.html = /*html*/`
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <script type="text/javascript" src="/participant/jtree.js"></script>
        <script src="/shared/bootstrap.min.js"></script>
        <script src="/13victor/highcharts.js"></script>
        <script src="/13victor/budget.js"></script>
        <script src="/13victor/Utilities.js"></script>
        <link rel="stylesheet" href="/shared/bootstrap.min.css">
        <link rel="stylesheet" href="/13victor/counting.css">
    </head>
    <body class='hidden' style='background-color: #AAA'>
        <div id='jtree'>
            <span v-show='player.status=="playing"'>
                {{stages}}
            </span>
            <span v-show='["ready", "waiting", "finished", "done"].includes(player.status)'>
                {{waiting-screens}}
            </span>
        </div>
        {{scripts}}
    </body>
</html>
`;

let decisionStage = app.newStage('decide');
decisionStage.wrapPlayingScreenInFormTag = false;
decisionStage.addOKButtonIfNone = false;
decisionStage.groupStart = function (group) {
    group.addTable('messages');
    group.addTable('allocationProposals');
    group.addTable('divisionProposals');
    group.budgetX = app.budgets[group.period.id - 1].maxX;
    group.budgetY = app.budgets[group.period.id - 1].maxY;
    group.maxX = group.budgetX * app.session.m;
    group.maxY = group.budgetY * app.session.m;
    group.budgetId = app.budgets[group.period.id - 1].id;
    group.budgetType = app.budgets[group.period.id - 1].type;
    group.validProposals = false;

    for (let p in group.players) {
        let x, y = '';
        let player = group.players[p];
        if (group.session().divisionType === 'EXOG') {
            let d = group.session().d1;
            if (player.idInGroup === 2) {
                d = group.session().d2;
            }
            x = d * 100;
            y = d * 100;
        } else {
            x = '';
            y = '';
        }
        player.myDivisionProposal = {
            x,
            y,
        }
    }

    if (group.app().treatment === 'pair') {
        let p1 = group.players[0];
        let p2 = group.players[1];
        p1.partnerDivisionProposal = p2.myDivisionProposal;
        p2.partnerDivisionProposal = p1.myDivisionProposal;
        p1.participant.partnerId = p2.participant.id;
        p2.participant.partnerId = p1.participant.id;
    }
}

decisionStage.playerStart = function (player) {
    player.toolTipX = -1;
    player.toolTipY = -1;
    player.madeAllocationSelection = false;
    player.newDivisionLetter = -1;
    player.newDivisionValue = -1;
    player.initialCircle = true;
    player.showRhombus = false;
    player.hoverDivisionX = -1;
    player.hoverDivisionY = -1;
    if (app.treatment === 'pair') {
        player.partnerAllocationProposal = { x: '', y: '' };
        player.allocationMultiplier = 1;
    } else {
        if (player.idInGroup === 1) {
            player.allocationMultiplier = app.session.e1;
        } else {
            player.allocationMultiplier = app.session.e2;
        }
    }
    player.maxX = player.group.maxX * player.allocationMultiplier;
    player.maxY = player.group.maxY * player.allocationMultiplier;

    let randX = Math.random() * player.maxX;
    let randY = (1 - randX / player.maxX) * player.maxY;
    player.myAllocationProposal = { x: randX, y: randY };
}

decisionStage.activeScreen = /*html*/`
<div class="modal" id="confirmAllocationModal" tabindex="-1" role="dialog" style='margin-top: 30vh'>
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <div>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <p style='padding-top: 30px;'>Your chosen allocation is X={{player.toolTipX}} and Y={{player.toolTipY}}.</p>
        <p>Do you want to confirm this allocation?</p>
      </div>
      <div class="modal-footer" style='justify-content: left'>
        <button type="button" class="btn btn-primary" data-dismiss="modal" onclick='jt.sendAllocationProposal()'>Yes</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
      </div>
    </div>
  </div>
</div>
<div class="modal" id="confirmDivisionModal" tabindex="-1" role="dialog" style='margin-top: 30vh'>
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <div>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <p style='padding-top: 30px;'>Your chosen division is {{player.newDivisionLetter}}={{player.newDivisionValue}}%.</p>
        <p>Do you want to confirm this division?</p>
      </div>
      <div class="modal-footer" style='justify-content: left'>
        <button type="button" class="btn btn-primary" data-dismiss="modal" onclick='setMyDivisionProposal()'>Yes</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick='cancelDivisionProposal()'>No</button>
      </div>
    </div>
  </div>
</div>
<div class="modal" id="informMatchModal" tabindex="-1" role="dialog" style='margin-top: 30vh'>
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <p style='padding-top: 30px;'>Your allocation {{app.treatment === 'pair' && app.session.divisionType === "ENDO" ? ' and division' : ''}} proposals match. A new round will start.</p>
      </div>
      <div class="modal-footer" style='justify-content: left'>
        <button type="button" class="btn btn-primary" data-dismiss="modal" onclick='confirmNewRound()'>OK</button>
      </div>
    </div>
  </div>
</div>
<div style='display: flex; flex-direction: column;'>
    <div :style='"display: flex; flex-direction: row; width: 1180px; justify-content: center;"'>
        <div class="card" :style='app.treatment === "pair" ? "flex: 1 1 auto" : ""'>
            <div class="card-body">
                <div style='display: flex; height: 72px;'>
                    <div style='margin-right: 10px;'>
                        <div style='padding-bottom: 5px'>{{participant.numDecParts == null ? 'Practice' : (participant.numDecParts === 1 ? 'Part A' : 'Part B')}}: Round {{period.id}} of {{app.numPeriods}}</div>
                        <h5 style='padding-bottom: 5px'>Please choose your preferred allocation{{app.treatment === 'pair' && app.session.divisionType === "ENDO" ? ' and division' : ''}}!</h5>
                    </div>
                    <div
                        v-if='
                            app.treatment === "pair" 
                        '
                        style='flex: 0 0 auto; padding-left: 20px;'
                    >
                        <b>Status</b>
                        <div v-if='
                            player.myAllocationProposal.x === player.partnerAllocationProposal.x && 
                            player.myAllocationProposal.y === player.partnerAllocationProposal.y'
                        class="text-success">
                            Allocation proposals DO match.
                        </div>
                        <div v-else class="text-danger">
                            Allocation proposals DO NOT match.
                        </div>
                        <div v-if='app.session.divisionType === "ENDO"'>
                            <div v-if='
                            player.myDivisionProposal.x !== "" &&
                            player.myDivisionProposal.x === 100 - player.partnerDivisionProposal.x && 
                            player.myDivisionProposal.y === 100 - player.partnerDivisionProposal.y'
                            class="text-success">
                            Division proposals DO match.
                            </div>
                            <div v-else class="text-danger">
                            Division proposals DO NOT match.
                            </div>
                        </div>
                    </div>
                </div>
                <div id="containerBargain" style='width: 600px; height: 600px' onclick='confirmAllocationSelection()' onmouseenter='showRhombus()' onmouseleave='hideRhombus()'></div>
                <div 
                    id='text' 
                    style='position: absolute; background-color: rgba(255, 255, 255, 0.9); border: 3px solid #000; border-radius: 5px; padding: 2px 5px; pointer-events: none;'
                    v-show='player.showRhombus && player.toolTipX !== "" && player.toolTipX > -1'
                    onclick='confirmAllocationSelection()'
                    onmousemove='draw_plot_lines(jt.toolTipX)'
                >
                    X = <b id='allocationProposalX'></b>, Y = <b id='allocationProposalY'></b>
                </div>
                <div
                    id='circle'
                    style='background-color: black; pointer-events: none; height: 10px; border-radius: 5px; width: 10px; position: absolute;'
                    v-show='player.toolTipX !== "" && player.toolTipX > -1'
                    onclick='confirmAllocationSelection()' 
                    onmousemove='draw_plot_lines(jt.toolTipX)'
                ></div>
            </div>
        </div>
        <div style='display: flex; flex-direction: column; flex: 0 0 360px;' v-if="app.treatment === 'pair'">
            <div class="card" style='flex: 1 1 auto;'>
                <div class='blocker' v-show='(app.session.divisionType === "EXOG" || player.myDivisionProposal.x !== "" && player.myDivisionProposal.x === 100 - player.partnerDivisionProposal.x && player.myDivisionProposal.y !== "" && player.myDivisionProposal.y === 100 - player.partnerDivisionProposal.y) && player.madeAllocationSelection && player.myAllocationProposal.x === player.partnerAllocationProposal.x'></div>
                <div class="card-body">
                    <h5 class="card-title">My allocation proposal</h5>
                    <div class='proposalDiv' v-if='!player.initialCircle && player.myAllocationProposal.x !== ""'>
                        X: {{player.myAllocationProposal.x | round(1)}}<br>
                        Y: {{player.myAllocationProposal.y | round(1)}}<br>
                    </div>
                    <div class='proposalDiv' v-else>None yet.</div>
                </div>
            </div>
            <div class="card" style='flex: 1 1 auto;'>
                <div class='blocker' v-show='(app.session.divisionType === "EXOG" || player.myDivisionProposal.x !== "" && player.myDivisionProposal.x === 100 - player.partnerDivisionProposal.x && player.myDivisionProposal.y !== "" && player.myDivisionProposal.y === 100 - player.partnerDivisionProposal.y) && player.madeAllocationSelection && player.myAllocationProposal.x === player.partnerAllocationProposal.x'></div>
                <div class="card-body" style='color: blue'>
                    <h5 class="card-title">Other's allocation proposal</h5>
                    <div class='proposalDiv' v-if='player.madeAllocationSelection && player.partnerAllocationProposal.x !== "" && (app.session.divisionType != "ENDO" || (player.myDivisionProposal.x !== "" && player.myDivisionProposal.y !== "" && player.partnerDivisionProposal.x !== "" && player.partnerDivisionProposal.y !== ""))'>
                        X: {{player.partnerAllocationProposal.x}}<br>
                        Y: {{player.partnerAllocationProposal.y}}<br>
                    </div>
                    <div class='proposalDiv' v-else>None yet.</div>
                </div>
            </div>
            <div class="card" v-if='app.session.divisionType === "EXOG"' style='flex: 1 1 auto;'>
                <div class='blocker'></div>
                <div class="card-body">
                    <h5 class="card-title">Division</h5>
                    <div>My share of the eventually agreed X: <b>{{player.myDivisionProposal.x}}%</b></div>
                    <div>My share of the eventually agreed Y: <b>{{player.myDivisionProposal.y}}%</b></div>
                </div>
            </div>
            <div class="card" v-if='app.session.divisionType === "ENDO"' style='flex: 1 1 auto;'>
                <div class='blocker' v-show='(app.session.divisionType === "EXOG" || player.myDivisionProposal.x !== "" && player.myDivisionProposal.x === 100 - player.partnerDivisionProposal.x && player.myDivisionProposal.y !== "" && player.myDivisionProposal.y === 100 - player.partnerDivisionProposal.y) && player.madeAllocationSelection && player.myAllocationProposal.x === player.partnerAllocationProposal.x'></div>
                <div class="card-body">
                    <h5 class="card-title">My proposed division</h5>
                    <div style='height: 120px;'>
                        <div>My share of the eventually agreed X: <b>{{(player.myDivisionProposal == null || player.myDivisionProposal.x === '') ? '' : (player.myDivisionProposal.x + "%")}}</b></div>
                        <div style='display: flex; margin-top: 30px; margin-bottom: 20px;'>
                            <span style='flex: 0 0 auto'>0%</span>
                            <div class='rangeWrapper'>
                                <span v-show='player.partnerDivisionProposal.x !== "" && player.partnerDivisionProposal.y !== "" && player.myDivisionProposal.x !== "" && player.myDivisionProposal.y !== ""' id='partnerDivisionXBar' class='divisionBar'></span>
                                <span v-show='player.partnerDivisionProposal.x !== "" && player.partnerDivisionProposal.y !== "" && player.myDivisionProposal.x !== "" && player.myDivisionProposal.y !== ""' id='partnerDivisionXText' class='divisionText'></span>
                                <span v-show='player.hoverDivisionX > -1' id='hoverDivisionXBar' class='divisionBar divisionHoverBar'></span>
                                <span v-show='player.hoverDivisionX > -1' id='hoverDivisionXText' class='divisionHoverText'></span>
                                <input class='rangeBottom' id="myDivisionX" value='0' type="range" min="0" max="100" step="1"> 
                                <input class='rangeTop' id="myDivisionX2" value='0' type="range" min="0" max="100" step="1" onmouseleave="mouseLeave('X')" onmousemove="mouseMove(event, 'X')" onchange="confirmDivisionSelection(event)"> 
                            </div>
                            <span style='flex: 0 0 auto'>100%</span>
                        </div>
                    </div>
                    <div style='height: 120px;'>
                        <div>My share of the eventually agreed Y: <b>{{(player.myDivisionProposal == null || player.myDivisionProposal.y === '') ? '' : (player.myDivisionProposal.y + "%")}}</b></div>
                        <div style='display: flex; margin-top: 30px; margin-bottom: 20px;'>
                            <span style='flex: 0 0 auto'>0%</span>
                            <div class='rangeWrapper'>
                                <span v-show='player.partnerDivisionProposal.x !== "" && player.partnerDivisionProposal.y !== "" && player.myDivisionProposal.x !== "" && player.myDivisionProposal.y !== ""' id='partnerDivisionYBar' class='divisionBar'></span>
                                <span v-show='player.partnerDivisionProposal.x !== "" && player.partnerDivisionProposal.y !== "" && player.myDivisionProposal.x !== "" && player.myDivisionProposal.y !== ""' id='partnerDivisionYText' class='divisionText'></span>
                                <span v-show='player.hoverDivisionY > -1' id='hoverDivisionYBar' class='divisionBar divisionHoverBar'></span>
                                <span v-show='player.hoverDivisionY > -1' id='hoverDivisionYText' class='divisionHoverText'></span>
                                <input class='rangeBottom' id="myDivisionY" value='0' type="range" min="0" max="100" step="1"> 
                                <input class='rangeTop' id="myDivisionY2" value='0' type="range" min="0" max="100" step="1" onmouseleave="mouseLeave('Y')" onmousemove="mouseMove(event, 'Y')" onchange="confirmDivisionSelection(event)">
                            </div>
                            <span style='flex: 0 0 auto'>100%</span>
                        </div>
                    </div>
                    <div style='display: flex'>
                        <span style='height: 20px; margin-top: 3px; margin-right: 8px; width: 2px; background-color: black'></span>
                        <span style='color: black'>My division proposal</span>
                    </div>
                    <div style='display: flex'>
                        <span style='height: 20px; margin-top: 3px; margin-right: 8px; width: 2px; background-color: blue'></span>
                        <span style='color: blue'>Other's division proposal</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="card" v-if="app.treatment === 'pair'">
        <div class='blocker' v-show='!player.madeAllocationSelection || player.partnerAllocationProposal.x === "" || (app.session.divisionType == "ENDO" && (player.myDivisionProposal.x === "" || player.myDivisionProposal.y === "" || player.partnerDivisionProposal.x === "" || player.partnerDivisionProposal.y === ""))'></div>
        <div class="card-body">
            <h5 class="card-title">Chat</h5>
            <div style='display: flex;'>
                <input style='flex: 1 1 auto' type='text' id='chatMessageInput' autocomplete="off" onkeyup='keyUp(event)' placeholder='Enter message here...'>
                <button type='button' onclick='sendChatMessageToServer()'>Send message</button>
            </div>
            <div style='overflow-y: scroll; height: 100px; width: 100%; border: 2px solid #888; padding: 5px; margin-top: 5px;'>
                <div v-for='message in group.messages.slice().reverse()' :key='message.id' v-bind:style="message.player == player.id ? {color: 'black'} : {color: 'blue'}">
                    <span v-if='message.player == player.id'><b>ME:</b></span>
                    <span v-else><b>OTHER:</b></span>
                    {{ message.content }}
                </div>
            </div>
        </div>
    </div>
</div>
    `

app.messages.endBargaining = function () {
    let player = this.participant.player;
    player.endStage(false);
    for (let i in player.group.players) {
        if (player.group.players[i].status === 'playing') {
            return;
        }
    }
    player.group.forceEndStage(player.stage);
}

app.messages.sendMessage = function (content) {
    let player = this.participant.player;
    let group = player.group;
    let timePosted = player.timeInStage();
    let message = {
        content,
        player: player.id,
        timePosted,
    };
    group.messages.new(message); // Notifies group's players about new message.
    for (let p in group.players) {
        group.players[p].saveAndUpdate();
    }
}

app.messages.setMyAllocationProposal = function (proposal) {
    // 'this' is the client sending the proposal.
    let player = this.participant.player;
    let group = player.group;

    let timePosted = player.timeInStage();
    let message = {
        x: proposal.x,
        y: proposal.y,
        player: player.id,
        timePosted,
    };
    group.allocationProposals.new(message);

    player.madeAllocationSelection = true;
    player.myAllocationProposal = proposal;
    player.initialCircle = false;
    player.emit('setMyAllocationProposal', proposal);
    let partner = null;
    if (app.treatment === 'pair') {
        partner = group.playersExcept(player)[0];
        partner.partnerAllocationProposal = proposal;
        partner.emit('setPartnerAllocationProposal', proposal);
    }

    app.checkIfValid(group, player, partner, this);

}

app.checkIfValid = function (group, player, partner, client) {
    let valid = app.areProposalsValid(group);
    if (valid) {
        group.validProposals = true;
    }

    // Player exits decision stage after making proposal.
    if (app.treatment !== 'pair') {
        let end = app.messages.endBargaining.bind(client);
        end();
    }
    else {
        player.saveAndUpdate();
        partner.saveAndUpdate();
    }

}

app.messages.setMyDivisionProposal = function (proposal) {

    proposal = { x: proposal.X, y: proposal.Y };

    let player = this.participant.player;
    let group = player.group;

    let timePosted = player.timeInStage();
    let message = {
        x: proposal.x,
        y: proposal.y,
        player: player.id,
        timePosted,
    };
    group.divisionProposals.new(message);

    if (proposal.x != null) {
        player.myDivisionProposal.x = proposal.x;
    }
    if (proposal.y != null) {
        player.myDivisionProposal.y = proposal.y;
    }
    // console.log('new proposal = ', proposal, player.myDivisionProposal);
    player.emit('setMyDivisionProposal', player.myDivisionProposal);
    let partner = group.playersExcept(player)[0];
    partner.partnerDivisionProposal = player.myDivisionProposal;
    partner.emit('setPartnerDivisionProposal', player.myDivisionProposal);

    app.checkIfValid(group, player, partner, this);

}

decisionStage.playerEnd = function (player) {

    if (player.group.period.id == 1) {
        player.participant.allocationOutcomes = [];
        player.participant.divisionOutcomes = [];
    }
    player.participant.allocationOutcomes.push({ x: player.myAllocationProposal.x, y: player.myAllocationProposal.y });
    player.participant.divisionOutcomes.push({ x: player.myDivisionProposal.x, y: player.myDivisionProposal.y });

}

app.participantEnd = function (participant) {

    if (participant.chosenPayouts == null) {
        participant.chosenDecisions = [];
        participant.chosenPayouts = [];
        participant.chosenDivisions = [];
        participant.chosenAllocations = [];
        participant.chosenGoods = [];
        participant.chosenEuros = [];
    }

    let N = app.numPaidDecisions;

    if (N > app.numPeriods) {
        console.log('error: not enough paid periods');
        return;
    }

    let ints = [];
    for (let i = 0; i < app.numPeriods; i++) {
        ints.push(i);
    }
    Utils.shuffle(ints);
    ints = ints.splice(0, N);

    let chosenDecisions = [];
    let chosenGoods = [];
    let chosenPayouts = [];
    let chosenAllocations = [];
    let chosenDivisions = [];
    let chosenEuros = [];

    for (let i = 0; i < ints.length; i++) {
        let selectedGood = (Math.random() < app.session.probSelX) ? 'x' : 'y';
        let p = ints[i];
        chosenDecisions.push(p + 1);
        chosenGoods.push(selectedGood);
        let allocation = participant.allocationOutcomes[p];
        chosenAllocations.push(allocation);
        let division = participant.divisionOutcomes[p];
        let payout = allocation[selectedGood];
        if (division.x === '') {
            division = '-';
        } else {
            payout *= division[selectedGood] / 100;
        }
        chosenDivisions.push(division);
        chosenPayouts.push(payout);
        chosenEuros.push(payout * app.exRate);
    }
    participant.chosenDecisions.push(chosenDecisions);
    participant.chosenGoods.push(chosenGoods);
    participant.chosenPayouts.push(chosenPayouts);
    participant.chosenDivisions.push(chosenDivisions);
    participant.chosenAllocations.push(chosenAllocations);
    participant.chosenEuros.push(chosenEuros);

}



// Returns sum of all individual player proposals (for x and y), or false if not all players have made a proposal yet.
app.areProposalsValid = function (group) {

    if (group.players.length < 2) {
        return true;
    }

    let p1 = group.players[0];
    let p2 = group.players[1];

    if (group.app().treatment === 'individual') {
        return true;
    }

    let matchingAllocationProposals =
        p1.myAllocationProposal.x === p2.myAllocationProposal.x &&
        p1.myAllocationProposal.y === p2.myAllocationProposal.y;

    if (!matchingAllocationProposals) {
        return false;
    }

    let matchingDivisionProposals =
        group.app().session.divisionType === 'EXOG' ||
        (p1.myDivisionProposal.x === 100 - p2.myDivisionProposal.x &&
            p1.myDivisionProposal.y === 100 - p2.myDivisionProposal.y);

    if (!matchingDivisionProposals) {
        return false;
    }

    return true;

}

